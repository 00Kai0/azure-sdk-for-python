# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::ARM::Web
  module Models
    #
    # Model object.
    #
    class CertificateOrderCertificateProperties

      include MsRestAzure

      # @return [String] Key Vault Csm resource Id
      attr_accessor :key_vault_id

      # @return [String] Key Vault secret name
      attr_accessor :key_vault_secret_name

      # @return [KeyVaultSecretStatus] Status of the Key Vault secret.
      # Possible values include: 'Initialized', 'WaitingOnCertificateOrder',
      # 'Succeeded', 'CertificateOrderFailed',
      # 'OperationNotPermittedOnKeyVault',
      # 'AzureServiceUnauthorizedToAccessKeyVault', 'KeyVaultDoesNotExist',
      # 'KeyVaultSecretDoesNotExist', 'UnknownError', 'Unknown'
      attr_accessor :provisioning_state

      #
      # Validate the object. Throws ValidationError if validation fails.
      #
      def validate
      end

      #
      # Serializes given Model object into Ruby Hash.
      # @param object Model object to serialize.
      # @return [Hash] Serialized object in form of Ruby Hash.
      #
      def self.serialize_object(object)
        object.validate
        output_object = {}

        serialized_property = object.key_vault_id
        output_object['keyVaultId'] = serialized_property unless serialized_property.nil?

        serialized_property = object.key_vault_secret_name
        output_object['keyVaultSecretName'] = serialized_property unless serialized_property.nil?

        serialized_property = object.provisioning_state
        output_object['provisioningState'] = serialized_property unless serialized_property.nil?

        output_object
      end

      #
      # Deserializes given Ruby Hash into Model object.
      # @param object [Hash] Ruby Hash object to deserialize.
      # @return [CertificateOrderCertificateProperties] Deserialized object.
      #
      def self.deserialize_object(object)
        return if object.nil?
        output_object = CertificateOrderCertificateProperties.new

        deserialized_property = object['keyVaultId']
        output_object.key_vault_id = deserialized_property

        deserialized_property = object['keyVaultSecretName']
        output_object.key_vault_secret_name = deserialized_property

        deserialized_property = object['provisioningState']
        if (!deserialized_property.nil? && !deserialized_property.empty?)
          enum_is_valid = KeyVaultSecretStatus.constants.any? { |e| KeyVaultSecretStatus.const_get(e).to_s.downcase == deserialized_property.downcase }
          warn 'Enum KeyVaultSecretStatus does not contain ' + deserialized_property.downcase + ', but was received from the server.' unless enum_is_valid
        end
        output_object.provisioning_state = deserialized_property

        output_object
      end
    end
  end
end
