# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class ArmErrorResponse(Model):
    """ArmErrorResponse.

    :param error:
    :type error: ~azure.mgmt.advisor.models.ARMErrorResponseBody
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ARMErrorResponseBody'},
    }

    def __init__(self, **kwargs):
        super(ArmErrorResponse, self).__init__(**kwargs)
        self.error = kwargs.get('error', None)


class ArmErrorResponseException(HttpOperationError):
    """Server responsed with exception of type: 'ArmErrorResponse'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ArmErrorResponseException, self).__init__(deserialize, response, 'ArmErrorResponse', *args)


class ARMErrorResponseBody(Model):
    """ARMErrorResponseBody.

    :param message:
    :type message: str
    :param code:
    :type code: str
    """

    _attribute_map = {
        'message': {'key': 'message', 'type': 'str'},
        'code': {'key': 'code', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ARMErrorResponseBody, self).__init__(**kwargs)
        self.message = kwargs.get('message', None)
        self.code = kwargs.get('code', None)


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class ConfigData(Model):
    """The Advisor configuration data structure.

    :param exclude: Exclude the resource from Advisor evaluations. Valid
     values: False (default) or True.
    :type exclude: bool
    :param low_cpu_threshold: Minimum percentage threshold for Advisor low CPU
     utilization evaluation. Valid only for subscriptions. Valid values:
     5 (default), 10, 15 or 20. Possible values include: '5', '10', '15', '20'
    :type low_cpu_threshold: str or ~azure.mgmt.advisor.models.CpuThreshold
    :param digests: Advisor digest configuration. Valid only for subscriptions
    :type digests: list[~azure.mgmt.advisor.models.DigestConfig]
    :param id: Gets or sets the resource Id of the ARM resource.
    :type id: str
    :param type: Gets or sets the type of the ARM resource.
    :type type: str
    :param name: Gets or sets the name of the ARM resource.
    :type name: str
    """

    _attribute_map = {
        'exclude': {'key': 'properties.exclude', 'type': 'bool'},
        'low_cpu_threshold': {'key': 'properties.lowCpuThreshold', 'type': 'str'},
        'digests': {'key': 'properties.digests', 'type': '[DigestConfig]'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ConfigData, self).__init__(**kwargs)
        self.exclude = kwargs.get('exclude', None)
        self.low_cpu_threshold = kwargs.get('low_cpu_threshold', None)
        self.digests = kwargs.get('digests', None)
        self.id = kwargs.get('id', None)
        self.type = kwargs.get('type', None)
        self.name = kwargs.get('name', None)


class ConfigurationListResult(Model):
    """The list of Advisor configurations.

    :param value: The list of configurations.
    :type value: list[~azure.mgmt.advisor.models.ConfigData]
    :param next_link: The link used to get the next page of configurations.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ConfigData]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ConfigurationListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class DigestConfig(Model):
    """Advisor Digest configuration entity.

    :param action_group_resource_id: Action group resource id used by digest.
    :type action_group_resource_id: str
    :param frequency: Frequency that digest will be triggered. Value must
     conform to ISO 8601 standard and must be greater than equal to 7 day and
     less than or equal to 30 days.
    :type frequency: str
    :param categories: Categories to send digest for. If categories are not
     provided, then digest will be sent for all categories.
    :type categories: list[str or ~azure.mgmt.advisor.models.Category]
    :param language: Language for digest content body. Value must be ISO 639-1
     code for one of Azure portal supported languages. Otherwise, it will be
     converted into one. Default value is English (en).
    :type language: str
    """

    _attribute_map = {
        'action_group_resource_id': {'key': 'actionGroupResourceId', 'type': 'str'},
        'frequency': {'key': 'frequency', 'type': 'str'},
        'categories': {'key': 'categories', 'type': '[str]'},
        'language': {'key': 'language', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(DigestConfig, self).__init__(**kwargs)
        self.action_group_resource_id = kwargs.get('action_group_resource_id', None)
        self.frequency = kwargs.get('frequency', None)
        self.categories = kwargs.get('categories', None)
        self.language = kwargs.get('language', None)
