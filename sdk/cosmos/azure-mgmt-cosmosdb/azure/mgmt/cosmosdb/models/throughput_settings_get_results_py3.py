# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .arm_resource_properties_py3 import ARMResourceProperties


class ThroughputSettingsGetResults(ARMResourceProperties):
    """An Azure Cosmos DB resource throughput.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The unique resource identifier of the ARM resource.
    :vartype id: str
    :ivar name: The name of the ARM resource.
    :vartype name: str
    :ivar type: The type of Azure resource.
    :vartype type: str
    :param location: The location of the resource group to which the resource
     belongs.
    :type location: str
    :param tags:
    :type tags: dict[str, str]
    :param throughput: Required. Value of the Cosmos DB resource throughput
    :type throughput: int
    :param minimum_throughput: The minimum throughput of the resource
    :type minimum_throughput: str
    :param offer_replace_pending: The throughput replace is pending
    :type offer_replace_pending: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'throughput': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'throughput': {'key': 'properties.throughput', 'type': 'int'},
        'minimum_throughput': {'key': 'properties.minimumThroughput', 'type': 'str'},
        'offer_replace_pending': {'key': 'properties.offerReplacePending', 'type': 'str'},
    }

    def __init__(self, *, throughput: int, location: str=None, tags=None, minimum_throughput: str=None, offer_replace_pending: str=None, **kwargs) -> None:
        super(ThroughputSettingsGetResults, self).__init__(location=location, tags=tags, **kwargs)
        self.throughput = throughput
        self.minimum_throughput = minimum_throughput
        self.offer_replace_pending = offer_replace_pending
