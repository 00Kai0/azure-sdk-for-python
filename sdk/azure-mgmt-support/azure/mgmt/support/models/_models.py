# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class AddCommunication(Model):
    """Communication details.

    All required parameters must be populated in order to send to Azure.

    :param sender: Sender of the message. Defaulted to the UPN of the logged
     in user is this is not provided.
    :type sender: str
    :param subject: Required. Subject in plain text
    :type subject: str
    :param body: Required. Body in plain text
    :type body: str
    """

    _validation = {
        'subject': {'required': True},
        'body': {'required': True},
    }

    _attribute_map = {
        'sender': {'key': 'sender', 'type': 'str'},
        'subject': {'key': 'subject', 'type': 'str'},
        'body': {'key': 'body', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AddCommunication, self).__init__(**kwargs)
        self.sender = kwargs.get('sender', None)
        self.subject = kwargs.get('subject', None)
        self.body = kwargs.get('body', None)


class CheckNameAvailabilityInput(Model):
    """Input of CheckNameAvailability API.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The resource name to validate.
    :type name: str
    :ivar type: Required. The type of resource,
     Microsoft.Support/supportTickets. Default value:
     "Microsoft.Support/supportTickets" .
    :vartype type: str
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True, 'constant': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    type = "Microsoft.Support/supportTickets"

    def __init__(self, **kwargs):
        super(CheckNameAvailabilityInput, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)


class CheckNameAvailabilityOutput(Model):
    """Output of check name availability API.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar name_available: Indicates whether the name is available.
    :vartype name_available: bool
    :ivar reason: The reason why the name is not available.
    :vartype reason: str
    :ivar message: The detailed error message describing why the name is not
     available.
    :vartype message: str
    """

    _validation = {
        'name_available': {'readonly': True},
        'reason': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'name_available': {'key': 'nameAvailable', 'type': 'bool'},
        'reason': {'key': 'reason', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(CheckNameAvailabilityOutput, self).__init__(**kwargs)
        self.name_available = None
        self.reason = None
        self.message = None


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class CommunicationDetails(Model):
    """Object that represents Communication resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Id of the resource
    :vartype id: str
    :ivar name: Name of the resource
    :vartype name: str
    :ivar type: Type of the resource 'Microsoft.Support/communications
    :vartype type: str
    :param communication_type: Required. Communication type. Possible values
     include: 'web', 'phone'
    :type communication_type: str or
     ~azure.mgmt.support.models.CommunicationType
    :param communication_direction: Required. Direction of communication.
     Possible values include: 'inbound', 'outbound'
    :type communication_direction: str or
     ~azure.mgmt.support.models.CommunicationDirection
    :param sender: Sender of the communication.
    :type sender: str
    :param subject: Subject of the communication.
    :type subject: str
    :param body: Body of the communication.
    :type body: str
    :param created_date: Time in UTC (ISO 8601 format) when the communication
     was created.
    :type created_date: datetime
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'communication_type': {'required': True},
        'communication_direction': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'communication_type': {'key': 'properties.communicationType', 'type': 'str'},
        'communication_direction': {'key': 'properties.communicationDirection', 'type': 'str'},
        'sender': {'key': 'properties.sender', 'type': 'str'},
        'subject': {'key': 'properties.subject', 'type': 'str'},
        'body': {'key': 'properties.body', 'type': 'str'},
        'created_date': {'key': 'properties.createdDate', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs):
        super(CommunicationDetails, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.communication_type = kwargs.get('communication_type', None)
        self.communication_direction = kwargs.get('communication_direction', None)
        self.sender = kwargs.get('sender', None)
        self.subject = kwargs.get('subject', None)
        self.body = kwargs.get('body', None)
        self.created_date = kwargs.get('created_date', None)


class ContactProfile(Model):
    """Contact information associated with support ticket.

    All required parameters must be populated in order to send to Azure.

    :param first_name: Required. First name.
    :type first_name: str
    :param last_name: Required. Last name.
    :type last_name: str
    :param preferred_contact_method: Required. Preferred contact method.
     Possible values include: 'email', 'phone'
    :type preferred_contact_method: str or
     ~azure.mgmt.support.models.PreferredContactMethod
    :param primary_email_address: Required. Primary email address.
    :type primary_email_address: str
    :param additional_email_addresses: Additional email addresses.
    :type additional_email_addresses: list[str]
    :param phone_number: Phone number. This is required if preferred contact
     method is phone.
    :type phone_number: str
    :param preferred_time_zone: Required. Time zone of the user. This is the
     System.TimeZoneInfo.Id value
    :type preferred_time_zone: str
    :param country: Required. Country of the user. This is the ISO Alpha-3
     code
    :type country: str
    :param preferred_support_language: Required. Language of the user. This is
     the standard country-language code.
    :type preferred_support_language: str
    """

    _validation = {
        'first_name': {'required': True},
        'last_name': {'required': True},
        'preferred_contact_method': {'required': True},
        'primary_email_address': {'required': True},
        'preferred_time_zone': {'required': True},
        'country': {'required': True},
        'preferred_support_language': {'required': True},
    }

    _attribute_map = {
        'first_name': {'key': 'firstName', 'type': 'str'},
        'last_name': {'key': 'lastName', 'type': 'str'},
        'preferred_contact_method': {'key': 'preferredContactMethod', 'type': 'str'},
        'primary_email_address': {'key': 'primaryEmailAddress', 'type': 'str'},
        'additional_email_addresses': {'key': 'additionalEmailAddresses', 'type': '[str]'},
        'phone_number': {'key': 'phoneNumber', 'type': 'str'},
        'preferred_time_zone': {'key': 'preferredTimeZone', 'type': 'str'},
        'country': {'key': 'country', 'type': 'str'},
        'preferred_support_language': {'key': 'preferredSupportLanguage', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ContactProfile, self).__init__(**kwargs)
        self.first_name = kwargs.get('first_name', None)
        self.last_name = kwargs.get('last_name', None)
        self.preferred_contact_method = kwargs.get('preferred_contact_method', None)
        self.primary_email_address = kwargs.get('primary_email_address', None)
        self.additional_email_addresses = kwargs.get('additional_email_addresses', None)
        self.phone_number = kwargs.get('phone_number', None)
        self.preferred_time_zone = kwargs.get('preferred_time_zone', None)
        self.country = kwargs.get('country', None)
        self.preferred_support_language = kwargs.get('preferred_support_language', None)


class CreateSupportTicket(Model):
    """Describes the payload for creating a support ticket. Customers can create
    tickets for issues relating to Billing, Subscription Management, Service
    and subscription limits(quotas) and Technical as determined by service id
    in the request payload.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Id of the resource
    :vartype id: str
    :ivar name: Name of the resource
    :vartype name: str
    :ivar type: Type of the resource 'Microsoft.Support/supportTickets
    :vartype type: str
    :param service_id: Required. Azure service for which the support ticket
     will be created.
    :type service_id: str
    :param title: Required. Title of the support ticket.
    :type title: str
    :param description: Required. Description of the support ticket.
    :type description: str
    :param problem_start_time: Time in UTC (ISO 8601 format) when the problem
     started.
    :type problem_start_time: datetime
    :param problem_classification_id: Required. Problem classification id
     associated with the support ticket. This indicates the problem or the
     issue that the ticket is being opened for.
    :type problem_classification_id: str
    :param severity: Required. The severity associated with the support
     ticket. Possible values include: 'minimal', 'moderate', 'critical'
    :type severity: str or ~azure.mgmt.support.models.SeverityLevel
    :param require24_x7_response: Indicates if a 24x7 response is requested by
     the support ticket creator.
    :type require24_x7_response: bool
    :param contact_details: Required. User contact details associated with the
     support ticket.
    :type contact_details: ~azure.mgmt.support.models.ContactProfile
    :param technical_ticket_details: Additional ticket details associated with
     a technical support ticket request.
    :type technical_ticket_details:
     ~azure.mgmt.support.models.TechnicalTicketDetails
    :param quota_ticket_details: Additional ticket details associated with a
     quota support ticket request.
    :type quota_ticket_details: ~azure.mgmt.support.models.QuotaTicketDetails
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'service_id': {'required': True},
        'title': {'required': True},
        'description': {'required': True},
        'problem_classification_id': {'required': True},
        'severity': {'required': True},
        'contact_details': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'service_id': {'key': 'properties.serviceId', 'type': 'str'},
        'title': {'key': 'properties.title', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'problem_start_time': {'key': 'properties.problemStartTime', 'type': 'iso-8601'},
        'problem_classification_id': {'key': 'properties.problemClassificationId', 'type': 'str'},
        'severity': {'key': 'properties.severity', 'type': 'str'},
        'require24_x7_response': {'key': 'properties.require24X7Response', 'type': 'bool'},
        'contact_details': {'key': 'properties.contactDetails', 'type': 'ContactProfile'},
        'technical_ticket_details': {'key': 'properties.technicalTicketDetails', 'type': 'TechnicalTicketDetails'},
        'quota_ticket_details': {'key': 'properties.quotaTicketDetails', 'type': 'QuotaTicketDetails'},
    }

    def __init__(self, **kwargs):
        super(CreateSupportTicket, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.service_id = kwargs.get('service_id', None)
        self.title = kwargs.get('title', None)
        self.description = kwargs.get('description', None)
        self.problem_start_time = kwargs.get('problem_start_time', None)
        self.problem_classification_id = kwargs.get('problem_classification_id', None)
        self.severity = kwargs.get('severity', None)
        self.require24_x7_response = kwargs.get('require24_x7_response', None)
        self.contact_details = kwargs.get('contact_details', None)
        self.technical_ticket_details = kwargs.get('technical_ticket_details', None)
        self.quota_ticket_details = kwargs.get('quota_ticket_details', None)


class ExceptionResponse(Model):
    """The api error.

    :param error: The api error details.
    :type error: ~azure.mgmt.support.models.ServiceError
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ServiceError'},
    }

    def __init__(self, **kwargs):
        super(ExceptionResponse, self).__init__(**kwargs)
        self.error = kwargs.get('error', None)


class ExceptionResponseException(HttpOperationError):
    """Server responsed with exception of type: 'ExceptionResponse'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ExceptionResponseException, self).__init__(deserialize, response, 'ExceptionResponse', *args)


class Operation(Model):
    """The operation supported by Microsoft Support RP.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar name: Operation name: {provider}/{resource}/{operation}
    :vartype name: str
    :param display: The object that describes the operation.
    :type display: ~azure.mgmt.support.models.OperationDisplay
    """

    _validation = {
        'name': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
    }

    def __init__(self, **kwargs):
        super(Operation, self).__init__(**kwargs)
        self.name = None
        self.display = kwargs.get('display', None)


class OperationDisplay(Model):
    """The object that describes the operation.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar description: The description of the operation.
    :vartype description: str
    :ivar operation: The action that users can perform, based on their
     permission level.
    :vartype operation: str
    :ivar provider: Service provider: Microsoft Support.
    :vartype provider: str
    :ivar resource: Resource on which the operation is performed.
    :vartype resource: str
    """

    _validation = {
        'description': {'readonly': True},
        'operation': {'readonly': True},
        'provider': {'readonly': True},
        'resource': {'readonly': True},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(OperationDisplay, self).__init__(**kwargs)
        self.description = None
        self.operation = None
        self.provider = None
        self.resource = None


class ProblemClassification(Model):
    """Object that represents a ProblemClassification resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Id of the resource.
    :vartype id: str
    :ivar name: Name of the resource.
    :vartype name: str
    :ivar type: Type of the resource
     'Microsoft.Support/problemClassification'.
    :vartype type: str
    :param display_name: Localized name of problem classification.
    :type display_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ProblemClassification, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.display_name = kwargs.get('display_name', None)


class ProblemClassificationDetails(Model):
    """The details of the problem classification for which this support ticket was
    created.

    :param id: Id of the resource.
    :type id: str
    :param display_name: Localized name of problem classification.
    :type display_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ProblemClassificationDetails, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.display_name = kwargs.get('display_name', None)


class QuotaChangeRequest(Model):
    """Quota change request information.

    :param region: Region for which the quota change request is being made.
    :type region: str
    :param payload: The payload of the quota change request.
    :type payload: str
    """

    _attribute_map = {
        'region': {'key': 'region', 'type': 'str'},
        'payload': {'key': 'payload', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(QuotaChangeRequest, self).__init__(**kwargs)
        self.region = kwargs.get('region', None)
        self.payload = kwargs.get('payload', None)


class QuotaTicketDetails(Model):
    """Additional information for quota support ticket.

    :param quota_change_request_sub_type: This is the quota sub type for which
     the quota request is being made and is optional for some quota types.
    :type quota_change_request_sub_type: str
    :param quota_change_request_version: Quota change request version
    :type quota_change_request_version: str
    :param quota_change_requests: Quota change requests.
    :type quota_change_requests:
     list[~azure.mgmt.support.models.QuotaChangeRequest]
    """

    _attribute_map = {
        'quota_change_request_sub_type': {'key': 'quotaChangeRequestSubType', 'type': 'str'},
        'quota_change_request_version': {'key': 'quotaChangeRequestVersion', 'type': 'str'},
        'quota_change_requests': {'key': 'quotaChangeRequests', 'type': '[QuotaChangeRequest]'},
    }

    def __init__(self, **kwargs):
        super(QuotaTicketDetails, self).__init__(**kwargs)
        self.quota_change_request_sub_type = kwargs.get('quota_change_request_sub_type', None)
        self.quota_change_request_version = kwargs.get('quota_change_request_version', None)
        self.quota_change_requests = kwargs.get('quota_change_requests', None)


class Service(Model):
    """Object that represents a Service resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Id of the resource.
    :vartype id: str
    :ivar name: Name of the resource.
    :vartype name: str
    :ivar type: Type of the resource 'Microsoft.Support/services'.
    :vartype type: str
    :param display_name: Localized name of Azure service.
    :type display_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Service, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.display_name = kwargs.get('display_name', None)


class ServiceDetails(Model):
    """The details of the Azure service for which this support ticket was created.

    :param id: Id of the resource.
    :type id: str
    :param display_name: Localized name of Azure service.
    :type display_name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ServiceDetails, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.display_name = kwargs.get('display_name', None)


class ServiceError(Model):
    """The api error details.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param code: The error code.
    :type code: str
    :param message: The error message.
    :type message: str
    :param target: The target of the error.
    :type target: str
    :ivar details: The list of error details.
    :vartype details: list[~azure.mgmt.support.models.ServiceErrorDetail]
    """

    _validation = {
        'details': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ServiceErrorDetail]'},
    }

    def __init__(self, **kwargs):
        super(ServiceError, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)
        self.target = kwargs.get('target', None)
        self.details = None


class ServiceErrorDetail(Model):
    """The error details.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :param target: The target of the error.
    :type target: str
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ServiceErrorDetail, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = kwargs.get('target', None)


class ServiceLevelAgreement(Model):
    """Service Level Agreement details for a support ticket.

    :param start_time: Time in UTC (ISO 8601 format) when SLA started.
    :type start_time: datetime
    :param expiration_time: Time in UTC (ISO 8601 format) when SLA expires.
    :type expiration_time: datetime
    :param sla_minutes: Service Level Agreement in minutes
    :type sla_minutes: int
    """

    _attribute_map = {
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'expiration_time': {'key': 'expirationTime', 'type': 'iso-8601'},
        'sla_minutes': {'key': 'slaMinutes', 'type': 'int'},
    }

    def __init__(self, **kwargs):
        super(ServiceLevelAgreement, self).__init__(**kwargs)
        self.start_time = kwargs.get('start_time', None)
        self.expiration_time = kwargs.get('expiration_time', None)
        self.sla_minutes = kwargs.get('sla_minutes', None)


class SupportEngineer(Model):
    """Support engineer information.

    :param email_address: Support engineer email address.
    :type email_address: str
    """

    _attribute_map = {
        'email_address': {'key': 'emailAddress', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(SupportEngineer, self).__init__(**kwargs)
        self.email_address = kwargs.get('email_address', None)


class SupportTicketDetails(Model):
    """Object that represents SupportTicketDetails resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Id of the resource
    :vartype id: str
    :ivar name: Name of the resource
    :vartype name: str
    :ivar type: Type of the resource 'Microsoft.Support/supportTickets
    :vartype type: str
    :param support_ticket_id: System generated support ticket id.
    :type support_ticket_id: str
    :param description: Description of the support ticket.
    :type description: str
    :param problem_classification_details: This is the issue or the problem
     details that the support ticket is opened for.
    :type problem_classification_details:
     ~azure.mgmt.support.models.ProblemClassificationDetails
    :param severity: Severity of the support ticket. Possible values include:
     'minimal', 'moderate', 'critical'
    :type severity: str or ~azure.mgmt.support.models.SeverityLevel
    :param enrollment_id: Enrollment ID associated with the support ticket.
    :type enrollment_id: str
    :param production_outage: Indicates if this is a production outage.
    :type production_outage: bool
    :param is24_x7_response: Indicates if this is a 24x7 support ticket.
    :type is24_x7_response: bool
    :param contact_details: User information associated with the support
     ticket.
    :type contact_details: ~azure.mgmt.support.models.ContactProfile
    :param service_level_agreement: Service Level Agreement information for
     this support ticket.
    :type service_level_agreement:
     ~azure.mgmt.support.models.ServiceLevelAgreement
    :param support_engineer: Information about support engineer working on
     this support ticket.
    :type support_engineer: ~azure.mgmt.support.models.SupportEngineer
    :param support_plan_type: Support plan type associated with the support
     ticket.
    :type support_plan_type: str
    :param title: Title of the support ticket.
    :type title: str
    :param service_details: This is the Azure service details for which the
     support ticket was opened.
    :type service_details: ~azure.mgmt.support.models.ServiceDetails
    :param status: Status of the support ticket.
    :type status: str
    :param created_date: Time in UTC (ISO 8601 format) when support ticket was
     created.
    :type created_date: datetime
    :param modified_date: Time in UTC (ISO 8601 format) when support ticket
     was last modified.
    :type modified_date: datetime
    :param technical_ticket_details: Additional ticket details associated with
     a technical support ticket request.
    :type technical_ticket_details:
     ~azure.mgmt.support.models.TechnicalTicketDetails
    :param quota_ticket_details: Additional ticket details associated with a
     quota support ticket request.
    :type quota_ticket_details: ~azure.mgmt.support.models.QuotaTicketDetails
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'support_ticket_id': {'key': 'properties.supportTicketId', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'problem_classification_details': {'key': 'properties.problemClassificationDetails', 'type': 'ProblemClassificationDetails'},
        'severity': {'key': 'properties.severity', 'type': 'str'},
        'enrollment_id': {'key': 'properties.enrollmentId', 'type': 'str'},
        'production_outage': {'key': 'properties.productionOutage', 'type': 'bool'},
        'is24_x7_response': {'key': 'properties.is24X7Response', 'type': 'bool'},
        'contact_details': {'key': 'properties.contactDetails', 'type': 'ContactProfile'},
        'service_level_agreement': {'key': 'properties.serviceLevelAgreement', 'type': 'ServiceLevelAgreement'},
        'support_engineer': {'key': 'properties.supportEngineer', 'type': 'SupportEngineer'},
        'support_plan_type': {'key': 'properties.supportPlanType', 'type': 'str'},
        'title': {'key': 'properties.title', 'type': 'str'},
        'service_details': {'key': 'properties.serviceDetails', 'type': 'ServiceDetails'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'created_date': {'key': 'properties.createdDate', 'type': 'iso-8601'},
        'modified_date': {'key': 'properties.modifiedDate', 'type': 'iso-8601'},
        'technical_ticket_details': {'key': 'properties.technicalTicketDetails', 'type': 'TechnicalTicketDetails'},
        'quota_ticket_details': {'key': 'properties.quotaTicketDetails', 'type': 'QuotaTicketDetails'},
    }

    def __init__(self, **kwargs):
        super(SupportTicketDetails, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.support_ticket_id = kwargs.get('support_ticket_id', None)
        self.description = kwargs.get('description', None)
        self.problem_classification_details = kwargs.get('problem_classification_details', None)
        self.severity = kwargs.get('severity', None)
        self.enrollment_id = kwargs.get('enrollment_id', None)
        self.production_outage = kwargs.get('production_outage', None)
        self.is24_x7_response = kwargs.get('is24_x7_response', None)
        self.contact_details = kwargs.get('contact_details', None)
        self.service_level_agreement = kwargs.get('service_level_agreement', None)
        self.support_engineer = kwargs.get('support_engineer', None)
        self.support_plan_type = kwargs.get('support_plan_type', None)
        self.title = kwargs.get('title', None)
        self.service_details = kwargs.get('service_details', None)
        self.status = kwargs.get('status', None)
        self.created_date = kwargs.get('created_date', None)
        self.modified_date = kwargs.get('modified_date', None)
        self.technical_ticket_details = kwargs.get('technical_ticket_details', None)
        self.quota_ticket_details = kwargs.get('quota_ticket_details', None)


class TechnicalTicketDetails(Model):
    """Additional information for technical support ticket.

    :param resource_id: This is the resource id of the technical resource for
     which the support ticket is being created.
    :type resource_id: str
    """

    _attribute_map = {
        'resource_id': {'key': 'resourceId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(TechnicalTicketDetails, self).__init__(**kwargs)
        self.resource_id = kwargs.get('resource_id', None)


class UpdateContactProfile(Model):
    """Update to the contact information associated with support ticket.

    :param first_name: First name.
    :type first_name: str
    :param last_name: Last name.
    :type last_name: str
    :param preferred_contact_method: Preferred contact method. Possible values
     include: 'email', 'phone'
    :type preferred_contact_method: str or
     ~azure.mgmt.support.models.PreferredContactMethod
    :param primary_email_address: Primary email address.
    :type primary_email_address: str
    :param additional_email_addresses: Additional email addresses.
    :type additional_email_addresses: list[str]
    :param phone_number: Phone number. This is required if preferred contact
     method is phone.
    :type phone_number: str
    :param preferred_time_zone: Time zone of the user. This is the
     System.TimeZoneInfo.Id value
    :type preferred_time_zone: str
    :param country: Country of the user. This is the ISO Alpha-3 code
    :type country: str
    :param preferred_support_language: Language of the user. This is the
     standard country-language code.
    :type preferred_support_language: str
    """

    _attribute_map = {
        'first_name': {'key': 'firstName', 'type': 'str'},
        'last_name': {'key': 'lastName', 'type': 'str'},
        'preferred_contact_method': {'key': 'preferredContactMethod', 'type': 'str'},
        'primary_email_address': {'key': 'primaryEmailAddress', 'type': 'str'},
        'additional_email_addresses': {'key': 'additionalEmailAddresses', 'type': '[str]'},
        'phone_number': {'key': 'phoneNumber', 'type': 'str'},
        'preferred_time_zone': {'key': 'preferredTimeZone', 'type': 'str'},
        'country': {'key': 'country', 'type': 'str'},
        'preferred_support_language': {'key': 'preferredSupportLanguage', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(UpdateContactProfile, self).__init__(**kwargs)
        self.first_name = kwargs.get('first_name', None)
        self.last_name = kwargs.get('last_name', None)
        self.preferred_contact_method = kwargs.get('preferred_contact_method', None)
        self.primary_email_address = kwargs.get('primary_email_address', None)
        self.additional_email_addresses = kwargs.get('additional_email_addresses', None)
        self.phone_number = kwargs.get('phone_number', None)
        self.preferred_time_zone = kwargs.get('preferred_time_zone', None)
        self.country = kwargs.get('country', None)
        self.preferred_support_language = kwargs.get('preferred_support_language', None)


class UpdateSupportTicket(Model):
    """Updates support ticket.

    :param severity: Severity level. Possible values include: 'minimal',
     'moderate', 'critical'
    :type severity: str or ~azure.mgmt.support.models.SeverityLevel
    :param contact_details: Contact details to be updated on the support
     ticket.
    :type contact_details: ~azure.mgmt.support.models.UpdateContactProfile
    """

    _attribute_map = {
        'severity': {'key': 'severity', 'type': 'str'},
        'contact_details': {'key': 'contactDetails', 'type': 'UpdateContactProfile'},
    }

    def __init__(self, **kwargs):
        super(UpdateSupportTicket, self).__init__(**kwargs)
        self.severity = kwargs.get('severity', None)
        self.contact_details = kwargs.get('contact_details', None)
