# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class Assignment(Model):
    """Model for Assignments resource type.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param scope: Scope of assignment.
    :type scope: str
    :param monitor_configuration_id: Id of assigned monitor configuration.
    :type monitor_configuration_id: str
    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'scope': {'key': 'properties.scope', 'type': 'str'},
        'monitor_configuration_id': {'key': 'properties.monitorConfigurationId', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, *, scope: str=None, monitor_configuration_id: str=None, **kwargs) -> None:
        super(Assignment, self).__init__(**kwargs)
        self.scope = scope
        self.monitor_configuration_id = monitor_configuration_id
        self.id = None
        self.name = None
        self.type = None


class AssignmentCreateParameters(Model):
    """Model for AssignmentCreateParameters properties.

    :param monitor_configuration_id: Id of assigned monitor configuration.
    :type monitor_configuration_id: str
    """

    _attribute_map = {
        'monitor_configuration_id': {'key': 'monitorConfigurationId', 'type': 'str'},
    }

    def __init__(self, *, monitor_configuration_id: str=None, **kwargs) -> None:
        super(AssignmentCreateParameters, self).__init__(**kwargs)
        self.monitor_configuration_id = monitor_configuration_id


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class HealthRollup(Model):
    """Model for health rollup.

    :param name: Name of the health rollup.
    :type name: str
    :param description: Description of the health rollup.
    :type description: str
    :param properties: Health rollup properties.
    :type properties: object
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'object'},
    }

    def __init__(self, *, name: str=None, description: str=None, properties=None, **kwargs) -> None:
        super(HealthRollup, self).__init__(**kwargs)
        self.name = name
        self.description = description
        self.properties = properties


class HealthRule(Model):
    """Model for health rule.

    :param name: Name of the health rule.
    :type name: str
    :param description: Description of the health rule.
    :type description: str
    :param properties: Health rule properties.
    :type properties: object
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'object'},
    }

    def __init__(self, *, name: str=None, description: str=None, properties=None, **kwargs) -> None:
        super(HealthRule, self).__init__(**kwargs)
        self.name = name
        self.description = description
        self.properties = properties


class MonitorConfiguration(Model):
    """The resource model definition for MonitorConfiguration resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param schema_version: Schema version.
    :type schema_version: str
    :param target_resource_types: Target resource types.
    :type target_resource_types: list[str]
    :param configuration_type: Type of monitor configuration. Possible values
     include: 'BaseOS'
    :type configuration_type: str or
     ~azure.mgmt.monitorconfiguration.models.ConfigurationType
    :param monitoring_engine: Service handling the configuration. Possible
     values include: 'VMHealth'
    :type monitoring_engine: str or
     ~azure.mgmt.monitorconfiguration.models.MonitoringEngine
    :param health_rules: Collection of health rules.
    :type health_rules:
     list[~azure.mgmt.monitorconfiguration.models.HealthRule]
    :param health_rollups: Collection of health rollups.
    :type health_rollups:
     list[~azure.mgmt.monitorconfiguration.models.HealthRollup]
    :param tags: Resource tags.
    :type tags: object
    :param location: The geo-location where the resource lives.
    :type location: str
    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'schema_version': {'key': 'properties.schemaVersion', 'type': 'str'},
        'target_resource_types': {'key': 'properties.targetResourceTypes', 'type': '[str]'},
        'configuration_type': {'key': 'properties.configurationType', 'type': 'str'},
        'monitoring_engine': {'key': 'properties.monitoringEngine', 'type': 'str'},
        'health_rules': {'key': 'properties.healthRules', 'type': '[HealthRule]'},
        'health_rollups': {'key': 'properties.healthRollups', 'type': '[HealthRollup]'},
        'tags': {'key': 'tags', 'type': 'object'},
        'location': {'key': 'location', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, *, schema_version: str=None, target_resource_types=None, configuration_type=None, monitoring_engine=None, health_rules=None, health_rollups=None, tags=None, location: str=None, **kwargs) -> None:
        super(MonitorConfiguration, self).__init__(**kwargs)
        self.schema_version = schema_version
        self.target_resource_types = target_resource_types
        self.configuration_type = configuration_type
        self.monitoring_engine = monitoring_engine
        self.health_rules = health_rules
        self.health_rollups = health_rollups
        self.tags = tags
        self.location = location
        self.id = None
        self.name = None
        self.type = None


class MonitorConfigurationCreateOrUpdateParameters(Model):
    """The resource model definition for
    MonitorConfigurationCreateOrUpdateParameters resource.

    :param tags: Resource tags.
    :type tags: object
    :param location: The geo-location where the resource lives.
    :type location: str
    :param schema_version: Schema version.
    :type schema_version: str
    :param target_resource_types: Target resource types.
    :type target_resource_types: list[str]
    :param configuration_type: Type of monitor configuration. Possible values
     include: 'BaseOS'
    :type configuration_type: str or
     ~azure.mgmt.monitorconfiguration.models.ConfigurationType
    :param monitoring_engine: Service handling the configuration. Possible
     values include: 'VMHealth'
    :type monitoring_engine: str or
     ~azure.mgmt.monitorconfiguration.models.MonitoringEngine
    :param health_rules: Collection of health rules.
    :type health_rules:
     list[~azure.mgmt.monitorconfiguration.models.HealthRule]
    :param health_rollups: Collection of health rollups.
    :type health_rollups:
     list[~azure.mgmt.monitorconfiguration.models.HealthRollup]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': 'object'},
        'location': {'key': 'location', 'type': 'str'},
        'schema_version': {'key': 'properties.schemaVersion', 'type': 'str'},
        'target_resource_types': {'key': 'properties.targetResourceTypes', 'type': '[str]'},
        'configuration_type': {'key': 'properties.configurationType', 'type': 'str'},
        'monitoring_engine': {'key': 'properties.monitoringEngine', 'type': 'str'},
        'health_rules': {'key': 'properties.healthRules', 'type': '[HealthRule]'},
        'health_rollups': {'key': 'properties.healthRollups', 'type': '[HealthRollup]'},
    }

    def __init__(self, *, tags=None, location: str=None, schema_version: str=None, target_resource_types=None, configuration_type=None, monitoring_engine=None, health_rules=None, health_rollups=None, **kwargs) -> None:
        super(MonitorConfigurationCreateOrUpdateParameters, self).__init__(**kwargs)
        self.tags = tags
        self.location = location
        self.schema_version = schema_version
        self.target_resource_types = target_resource_types
        self.configuration_type = configuration_type
        self.monitoring_engine = monitoring_engine
        self.health_rules = health_rules
        self.health_rollups = health_rollups


class Operation(Model):
    """Operation supported by the resource provider.

    :param display: The properties of the resource operation.
    :type display: ~azure.mgmt.monitorconfiguration.models.OperationProperties
    :param name: The name of the resource operation.
    :type name: str
    :param origin: The origin of the operation.
    :type origin: str
    """

    _attribute_map = {
        'display': {'key': 'display', 'type': 'OperationProperties'},
        'name': {'key': 'name', 'type': 'str'},
        'origin': {'key': 'origin', 'type': 'str'},
    }

    def __init__(self, *, display=None, name: str=None, origin: str=None, **kwargs) -> None:
        super(Operation, self).__init__(**kwargs)
        self.display = display
        self.name = name
        self.origin = origin


class OperationProperties(Model):
    """Properties of an operation supported by the resource provider.

    :param description: The description of the resource provider.
    :type description: str
    :param operation: This operation name.
    :type operation: str
    :param provider: The provider name.
    :type provider: str
    :param resource: The resource name.
    :type resource: str
    """

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
    }

    def __init__(self, *, description: str=None, operation: str=None, provider: str=None, resource: str=None, **kwargs) -> None:
        super(OperationProperties, self).__init__(**kwargs)
        self.description = description
        self.operation = operation
        self.provider = provider
        self.resource = resource
