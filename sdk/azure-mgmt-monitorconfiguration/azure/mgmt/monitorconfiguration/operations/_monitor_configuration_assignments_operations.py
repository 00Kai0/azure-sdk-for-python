# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import uuid
from msrest.pipeline import ClientRawResponse
from msrestazure.azure_exceptions import CloudError
from msrest.polling import LROPoller, NoPolling
from msrestazure.polling.arm_polling import ARMPolling

from .. import models


class MonitorConfigurationAssignmentsOperations(object):
    """MonitorConfigurationAssignmentsOperations operations.

    You should not instantiate directly this class, but create a Client instance that will create it for you and attach it as attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):

        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer

        self.config = config

    def get_for_scope(
            self, scope, assignment_name, api_version, custom_headers=None, raw=False, **operation_config):
        """Get specified monitor configuration assignment under a scope. Scope can
        be either of
        1. Subscription in the format: /subscriptions/{subscriptionId}
        2. Resource group in the format:
        /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}
        3. ARM resource in format:
        /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerNamespace}/{resourceType}/{resourceName}.

        :param scope: Scope for assignment.
        :type scope: str
        :param assignment_name: Name for monitor configuration assignment.
        :type assignment_name: str
        :param api_version: The API version to use for this operation.
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: Assignment or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.monitorconfiguration.models.Assignment or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        # Construct URL
        url = self.get_for_scope.metadata['url']
        path_format_arguments = {
            'scope': self._serialize.url("scope", scope, 'str'),
            'assignmentName': self._serialize.url("assignment_name", assignment_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('Assignment', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    get_for_scope.metadata = {'url': '/{scope}/providers/Microsoft.MonitorConfiguration/assignments/{assignmentName}'}


    def _create_on_scope_initial(
            self, scope, assignment_name, api_version, monitor_configuration_id=None, custom_headers=None, raw=False, **operation_config):
        assignment_create_parameters = models.AssignmentCreateParameters(monitor_configuration_id=monitor_configuration_id)

        # Construct URL
        url = self.create_on_scope.metadata['url']
        path_format_arguments = {
            'scope': self._serialize.url("scope", scope, 'str'),
            'assignmentName': self._serialize.url("assignment_name", assignment_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(assignment_create_parameters, 'AssignmentCreateParameters')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 202]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('Assignment', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized

    def create_on_scope(
            self, scope, assignment_name, api_version, monitor_configuration_id=None, custom_headers=None, raw=False, polling=True, **operation_config):
        """Create monitor configuration assignment on a scope. Scope can be either
        of
        1. Subscription in the format: /subscriptions/{subscriptionId}
        2. Resource group in the format:
        /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}
        3. ARM resource in format:
        /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerNamespace}/{resourceType}/{resourceName}.

        :param scope: Scope for assignment.
        :type scope: str
        :param assignment_name: Name for monitor configuration assignment.
        :type assignment_name: str
        :param api_version: The API version to use for this operation.
        :type api_version: str
        :param monitor_configuration_id: Id of assigned monitor configuration.
        :type monitor_configuration_id: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: The poller return type is ClientRawResponse, the
         direct response alongside the deserialized response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns Assignment or
         ClientRawResponse<Assignment> if raw==True
        :rtype:
         ~msrestazure.azure_operation.AzureOperationPoller[~azure.mgmt.monitorconfiguration.models.Assignment]
         or
         ~msrestazure.azure_operation.AzureOperationPoller[~msrest.pipeline.ClientRawResponse[~azure.mgmt.monitorconfiguration.models.Assignment]]
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        raw_result = self._create_on_scope_initial(
            scope=scope,
            assignment_name=assignment_name,
            api_version=api_version,
            monitor_configuration_id=monitor_configuration_id,
            custom_headers=custom_headers,
            raw=True,
            **operation_config
        )

        def get_long_running_output(response):
            deserialized = self._deserialize('Assignment', response)

            if raw:
                client_raw_response = ClientRawResponse(deserialized, response)
                return client_raw_response

            return deserialized

        lro_delay = operation_config.get(
            'long_running_operation_timeout',
            self.config.long_running_operation_timeout)
        if polling is True: polling_method = ARMPolling(lro_delay, **operation_config)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    create_on_scope.metadata = {'url': '/{scope}/providers/Microsoft.MonitorConfiguration/assignments/{assignmentName}'}


    def _delete_from_scope_initial(
            self, scope, assignment_name, api_version, custom_headers=None, raw=False, **operation_config):
        # Construct URL
        url = self.delete_from_scope.metadata['url']
        path_format_arguments = {
            'scope': self._serialize.url("scope", scope, 'str'),
            'assignmentName': self._serialize.url("assignment_name", assignment_name, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 202, 204]:
            exp = CloudError(response)
            exp.request_id = response.headers.get('x-ms-request-id')
            raise exp

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('object', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized

    def delete_from_scope(
            self, scope, assignment_name, api_version, custom_headers=None, raw=False, polling=True, **operation_config):
        """Delete monitor configuration assignment from a scope. Scope can be
        either of
        1. Subscription in the format: /subscriptions/{subscriptionId}
        2. Resource group in the format:
        /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}
        3. ARM resource in format:
        /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerNamespace}/{resourceType}/{resourceName}.

        :param scope: Scope for assignment.
        :type scope: str
        :param assignment_name: Name for monitor configuration assignment.
        :type assignment_name: str
        :param api_version: The API version to use for this operation.
        :type api_version: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: The poller return type is ClientRawResponse, the
         direct response alongside the deserialized response
        :param polling: True for ARMPolling, False for no polling, or a
         polling object for personal polling strategy
        :return: An instance of LROPoller that returns object or
         ClientRawResponse<object> if raw==True
        :rtype: ~msrestazure.azure_operation.AzureOperationPoller[object] or
         ~msrestazure.azure_operation.AzureOperationPoller[~msrest.pipeline.ClientRawResponse[object]]
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        raw_result = self._delete_from_scope_initial(
            scope=scope,
            assignment_name=assignment_name,
            api_version=api_version,
            custom_headers=custom_headers,
            raw=True,
            **operation_config
        )

        def get_long_running_output(response):
            deserialized = self._deserialize('object', response)

            if raw:
                client_raw_response = ClientRawResponse(deserialized, response)
                return client_raw_response

            return deserialized

        lro_delay = operation_config.get(
            'long_running_operation_timeout',
            self.config.long_running_operation_timeout)
        if polling is True: polling_method = ARMPolling(lro_delay, **operation_config)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    delete_from_scope.metadata = {'url': '/{scope}/providers/Microsoft.MonitorConfiguration/assignments/{assignmentName}'}

    def list_by_scope(
            self, scope, api_version, skiptoken=None, custom_headers=None, raw=False, **operation_config):
        """Get monitor configuration assignments for a scope. Scope can be either
        of
        1. Subscription in the format: /subscriptions/{subscriptionId}
        2. Resource group in the format:
        /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}
        3. ARM resource in format:
        /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{providerNamespace}/{resourceType}/{resourceName}.

        :param scope: Scope for assignment.
        :type scope: str
        :param api_version: The API version to use for this operation.
        :type api_version: str
        :param skiptoken: The page-continuation token to use with a paged
         version of this API
        :type skiptoken: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: An iterator like instance of Assignment
        :rtype:
         ~azure.mgmt.monitorconfiguration.models.AssignmentPaged[~azure.mgmt.monitorconfiguration.models.Assignment]
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.list_by_scope.metadata['url']
                path_format_arguments = {
                    'scope': self._serialize.url("scope", scope, 'str')
                }
                url = self._client.format_url(url, **path_format_arguments)

                # Construct parameters
                query_parameters = {}
                query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
                if skiptoken is not None:
                    query_parameters['$skiptoken'] = self._serialize.query("skiptoken", skiptoken, 'str')

            else:
                url = next_link
                query_parameters = {}

            # Construct headers
            header_parameters = {}
            header_parameters['Accept'] = 'application/json'
            if self.config.generate_client_request_id:
                header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
            if custom_headers:
                header_parameters.update(custom_headers)
            if self.config.accept_language is not None:
                header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        def internal_paging(next_link=None):
            request = prepare_request(next_link)

            response = self._client.send(request, stream=False, **operation_config)

            if response.status_code not in [200]:
                exp = CloudError(response)
                exp.request_id = response.headers.get('x-ms-request-id')
                raise exp

            return response

        # Deserialize response
        header_dict = None
        if raw:
            header_dict = {}
        deserialized = models.AssignmentPaged(internal_paging, self._deserialize.dependencies, header_dict)

        return deserialized
    list_by_scope.metadata = {'url': '/{scope}/providers/Microsoft.MonitorConfiguration/assignments'}

    def list_by_configuration(
            self, resource_group_name, monitor_configuration_name, api_version, skiptoken=None, custom_headers=None, raw=False, **operation_config):
        """Get assignments of a monitor configuration.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param monitor_configuration_name: The name of monitor configuration.
        :type monitor_configuration_name: str
        :param api_version: The API version to use for this operation.
        :type api_version: str
        :param skiptoken: The page-continuation token to use with a paged
         version of this API
        :type skiptoken: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: An iterator like instance of Assignment
        :rtype:
         ~azure.mgmt.monitorconfiguration.models.AssignmentPaged[~azure.mgmt.monitorconfiguration.models.Assignment]
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """
        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.list_by_configuration.metadata['url']
                path_format_arguments = {
                    'subscriptionId': self._serialize.url("self.config.subscription_id", self.config.subscription_id, 'str'),
                    'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str'),
                    'monitorConfigurationName': self._serialize.url("monitor_configuration_name", monitor_configuration_name, 'str')
                }
                url = self._client.format_url(url, **path_format_arguments)

                # Construct parameters
                query_parameters = {}
                query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')
                if skiptoken is not None:
                    query_parameters['$skiptoken'] = self._serialize.query("skiptoken", skiptoken, 'str')

            else:
                url = next_link
                query_parameters = {}

            # Construct headers
            header_parameters = {}
            header_parameters['Accept'] = 'application/json'
            if self.config.generate_client_request_id:
                header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
            if custom_headers:
                header_parameters.update(custom_headers)
            if self.config.accept_language is not None:
                header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request

        def internal_paging(next_link=None):
            request = prepare_request(next_link)

            response = self._client.send(request, stream=False, **operation_config)

            if response.status_code not in [200]:
                exp = CloudError(response)
                exp.request_id = response.headers.get('x-ms-request-id')
                raise exp

            return response

        # Deserialize response
        header_dict = None
        if raw:
            header_dict = {}
        deserialized = models.AssignmentPaged(internal_paging, self._deserialize.dependencies, header_dict)

        return deserialized
    list_by_configuration.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MonitorConfiguration/monitorConfigurations/{monitorConfigurationName}/assignments'}
