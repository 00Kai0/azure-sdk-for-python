# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .additional_data_py3 import AdditionalData


class ServerVulnerabilitySubAssessmentProperties(AdditionalData):
    """Additional context fields for server vulnerability assessment.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param assessed_resource_type: Required. Constant filled by server.
    :type assessed_resource_type: str
    :ivar type: Vulnerability Type. e.g: Vulnerability, Potential
     Vulnerability, Information Gathered
    :vartype type: str
    :ivar cvss: Dictionary from cvss version to cvss details object
    :vartype cvss: dict[str, ~azure.mgmt.security.models.CVSS]
    :ivar patchable: Indicates whether a patch is available or not
    :vartype patchable: bool
    :ivar cve: List of CVEs
    :vartype cve: list[~azure.mgmt.security.models.CVE]
    :ivar threat: Threat name
    :vartype threat: str
    :ivar remediation_link: Link for additional remediation explanation
    :vartype remediation_link: str
    :ivar vendor_references:
    :vartype vendor_references:
     list[~azure.mgmt.security.models.VendorReference]
    """

    _validation = {
        'assessed_resource_type': {'required': True},
        'type': {'readonly': True},
        'cvss': {'readonly': True},
        'patchable': {'readonly': True},
        'cve': {'readonly': True},
        'threat': {'readonly': True},
        'remediation_link': {'readonly': True},
        'vendor_references': {'readonly': True},
    }

    _attribute_map = {
        'assessed_resource_type': {'key': 'assessedResourceType', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'cvss': {'key': 'cvss', 'type': '{CVSS}'},
        'patchable': {'key': 'patchable', 'type': 'bool'},
        'cve': {'key': 'cve', 'type': '[CVE]'},
        'threat': {'key': 'threat', 'type': 'str'},
        'remediation_link': {'key': 'remediationLink', 'type': 'str'},
        'vendor_references': {'key': 'vendorReferences', 'type': '[VendorReference]'},
    }

    def __init__(self, **kwargs) -> None:
        super(ServerVulnerabilitySubAssessmentProperties, self).__init__(**kwargs)
        self.type = None
        self.cvss = None
        self.patchable = None
        self.cve = None
        self.threat = None
        self.remediation_link = None
        self.vendor_references = None
        self.assessed_resource_type = 'ServerVulnerabilityAssessment'
