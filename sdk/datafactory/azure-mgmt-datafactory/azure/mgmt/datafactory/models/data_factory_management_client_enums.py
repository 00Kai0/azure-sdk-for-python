# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from enum import Enum


class IntegrationRuntimeState(Enum):

    initial = "Initial"
    stopped = "Stopped"
    started = "Started"
    starting = "Starting"
    stopping = "Stopping"
    need_registration = "NeedRegistration"
    online = "Online"
    limited = "Limited"
    offline = "Offline"
    access_denied = "AccessDenied"


class IntegrationRuntimeAutoUpdate(Enum):

    on = "On"
    off = "Off"


class ParameterType(Enum):

    object_enum = "Object"
    string = "String"
    int_enum = "Int"
    float_enum = "Float"
    bool_enum = "Bool"
    array = "Array"
    secure_string = "SecureString"


class DependencyCondition(Enum):

    succeeded = "Succeeded"
    failed = "Failed"
    skipped = "Skipped"
    completed = "Completed"


class VariableType(Enum):

    string = "String"
    bool_enum = "Bool"
    array = "Array"


class TriggerRuntimeState(Enum):

    started = "Started"
    stopped = "Stopped"
    disabled = "Disabled"


class EventSubscriptionStatus(Enum):

    enabled = "Enabled"
    provisioning = "Provisioning"
    deprovisioning = "Deprovisioning"
    disabled = "Disabled"
    unknown = "Unknown"


class RunQueryFilterOperand(Enum):

    pipeline_name = "PipelineName"
    status = "Status"
    run_start = "RunStart"
    run_end = "RunEnd"
    activity_name = "ActivityName"
    activity_run_start = "ActivityRunStart"
    activity_run_end = "ActivityRunEnd"
    activity_type = "ActivityType"
    trigger_name = "TriggerName"
    trigger_run_timestamp = "TriggerRunTimestamp"
    run_group_id = "RunGroupId"
    latest_only = "LatestOnly"


class RunQueryFilterOperator(Enum):

    equals = "Equals"
    not_equals = "NotEquals"
    in_enum = "In"
    not_in = "NotIn"


class RunQueryOrderByField(Enum):

    run_start = "RunStart"
    run_end = "RunEnd"
    pipeline_name = "PipelineName"
    status = "Status"
    activity_name = "ActivityName"
    activity_run_start = "ActivityRunStart"
    activity_run_end = "ActivityRunEnd"
    trigger_name = "TriggerName"
    trigger_run_timestamp = "TriggerRunTimestamp"


class RunQueryOrder(Enum):

    asc = "ASC"
    desc = "DESC"


class TriggerRunStatus(Enum):

    succeeded = "Succeeded"
    failed = "Failed"
    inprogress = "Inprogress"


class TumblingWindowFrequency(Enum):

    minute = "Minute"
    hour = "Hour"


class BlobEventTypes(Enum):

    microsoft_storage_blob_created = "Microsoft.Storage.BlobCreated"
    microsoft_storage_blob_deleted = "Microsoft.Storage.BlobDeleted"


class DayOfWeek(Enum):

    sunday = "Sunday"
    monday = "Monday"
    tuesday = "Tuesday"
    wednesday = "Wednesday"
    thursday = "Thursday"
    friday = "Friday"
    saturday = "Saturday"


class DaysOfWeek(Enum):

    sunday = "Sunday"
    monday = "Monday"
    tuesday = "Tuesday"
    wednesday = "Wednesday"
    thursday = "Thursday"
    friday = "Friday"
    saturday = "Saturday"


class RecurrenceFrequency(Enum):

    not_specified = "NotSpecified"
    minute = "Minute"
    hour = "Hour"
    day = "Day"
    week = "Week"
    month = "Month"
    year = "Year"


class GoogleAdWordsAuthenticationType(Enum):

    service_authentication = "ServiceAuthentication"
    user_authentication = "UserAuthentication"


class SparkServerType(Enum):

    shark_server = "SharkServer"
    shark_server2 = "SharkServer2"
    spark_thrift_server = "SparkThriftServer"


class SparkThriftTransportProtocol(Enum):

    binary = "Binary"
    sasl = "SASL"
    http = "HTTP "


class SparkAuthenticationType(Enum):

    anonymous = "Anonymous"
    username = "Username"
    username_and_password = "UsernameAndPassword"
    windows_azure_hd_insight_service = "WindowsAzureHDInsightService"


class ServiceNowAuthenticationType(Enum):

    basic = "Basic"
    oauth2 = "OAuth2"


class PrestoAuthenticationType(Enum):

    anonymous = "Anonymous"
    ldap = "LDAP"


class PhoenixAuthenticationType(Enum):

    anonymous = "Anonymous"
    username_and_password = "UsernameAndPassword"
    windows_azure_hd_insight_service = "WindowsAzureHDInsightService"


class ImpalaAuthenticationType(Enum):

    anonymous = "Anonymous"
    sasl_username = "SASLUsername"
    username_and_password = "UsernameAndPassword"


class HiveServerType(Enum):

    hive_server1 = "HiveServer1"
    hive_server2 = "HiveServer2"
    hive_thrift_server = "HiveThriftServer"


class HiveThriftTransportProtocol(Enum):

    binary = "Binary"
    sasl = "SASL"
    http = "HTTP "


class HiveAuthenticationType(Enum):

    anonymous = "Anonymous"
    username = "Username"
    username_and_password = "UsernameAndPassword"
    windows_azure_hd_insight_service = "WindowsAzureHDInsightService"


class HBaseAuthenticationType(Enum):

    anonymous = "Anonymous"
    basic = "Basic"


class GoogleBigQueryAuthenticationType(Enum):

    service_authentication = "ServiceAuthentication"
    user_authentication = "UserAuthentication"


class SapHanaAuthenticationType(Enum):

    basic = "Basic"
    windows = "Windows"


class SftpAuthenticationType(Enum):

    basic = "Basic"
    ssh_public_key = "SshPublicKey"


class FtpAuthenticationType(Enum):

    basic = "Basic"
    anonymous = "Anonymous"


class HttpAuthenticationType(Enum):

    basic = "Basic"
    anonymous = "Anonymous"
    digest = "Digest"
    windows = "Windows"
    client_certificate = "ClientCertificate"


class RestServiceAuthenticationType(Enum):

    anonymous = "Anonymous"
    basic = "Basic"
    aad_service_principal = "AadServicePrincipal"
    managed_service_identity = "ManagedServiceIdentity"


class MongoDbAuthenticationType(Enum):

    basic = "Basic"
    anonymous = "Anonymous"


class ODataAuthenticationType(Enum):

    basic = "Basic"
    anonymous = "Anonymous"
    windows = "Windows"
    aad_service_principal = "AadServicePrincipal"
    managed_service_identity = "ManagedServiceIdentity"


class ODataAadServicePrincipalCredentialType(Enum):

    service_principal_key = "ServicePrincipalKey"
    service_principal_cert = "ServicePrincipalCert"


class TeradataAuthenticationType(Enum):

    basic = "Basic"
    windows = "Windows"


class Db2AuthenticationType(Enum):

    basic = "Basic"


class SybaseAuthenticationType(Enum):

    basic = "Basic"
    windows = "Windows"


class DynamicsDeploymentType(Enum):

    online = "Online"
    on_premises_with_ifd = "OnPremisesWithIfd"


class DynamicsAuthenticationType(Enum):

    office365 = "Office365"
    ifd = "Ifd"


class AvroCompressionCodec(Enum):

    none = "none"
    deflate = "deflate"
    snappy = "snappy"
    xz = "xz"
    bzip2 = "bzip2"


class AzureFunctionActivityMethod(Enum):

    get = "GET"
    post = "POST"
    put = "PUT"
    delete = "DELETE"
    options = "OPTIONS"
    head = "HEAD"
    trace = "TRACE"


class WebActivityMethod(Enum):

    get = "GET"
    post = "POST"
    put = "PUT"
    delete = "DELETE"


class NetezzaPartitionOption(Enum):

    none = "None"
    data_slice = "DataSlice"
    dynamic_range = "DynamicRange"


class CassandraSourceReadConsistencyLevels(Enum):

    all = "ALL"
    each_quorum = "EACH_QUORUM"
    quorum = "QUORUM"
    local_quorum = "LOCAL_QUORUM"
    one = "ONE"
    two = "TWO"
    three = "THREE"
    local_one = "LOCAL_ONE"
    serial = "SERIAL"
    local_serial = "LOCAL_SERIAL"


class TeradataPartitionOption(Enum):

    none = "None"
    hash = "Hash"
    dynamic_range = "DynamicRange"


class OraclePartitionOption(Enum):

    none = "None"
    physical_partitions_of_table = "PhysicalPartitionsOfTable"
    dynamic_range = "DynamicRange"


class StoredProcedureParameterType(Enum):

    string = "String"
    int_enum = "Int"
    int64 = "Int64"
    decimal_enum = "Decimal"
    guid = "Guid"
    boolean = "Boolean"
    date_enum = "Date"


class SapTablePartitionOption(Enum):

    none = "None"
    partition_on_int = "PartitionOnInt"
    partition_on_calendar_year = "PartitionOnCalendarYear"
    partition_on_calendar_month = "PartitionOnCalendarMonth"
    partition_on_calendar_date = "PartitionOnCalendarDate"
    partition_on_time = "PartitionOnTime"


class SalesforceSourceReadBehavior(Enum):

    query = "Query"
    query_all = "QueryAll"


class SsisPackageLocationType(Enum):

    ssisdb = "SSISDB"
    file = "File"


class HDInsightActivityDebugInfoOption(Enum):

    none = "None"
    always = "Always"
    failure = "Failure"


class SalesforceSinkWriteBehavior(Enum):

    insert = "Insert"
    upsert = "Upsert"


class AzureSearchIndexWriteBehaviorType(Enum):

    merge = "Merge"
    upload = "Upload"


class PolybaseSettingsRejectType(Enum):

    value = "value"
    percentage = "percentage"


class JsonWriteFilePattern(Enum):

    set_of_objects = "setOfObjects"
    array_of_objects = "arrayOfObjects"


class SapCloudForCustomerSinkWriteBehavior(Enum):

    insert = "Insert"
    update = "Update"


class WebHookActivityMethod(Enum):

    post = "POST"


class IntegrationRuntimeType(Enum):

    managed = "Managed"
    self_hosted = "SelfHosted"


class SelfHostedIntegrationRuntimeNodeStatus(Enum):

    need_registration = "NeedRegistration"
    online = "Online"
    limited = "Limited"
    offline = "Offline"
    upgrading = "Upgrading"
    initializing = "Initializing"
    initialize_failed = "InitializeFailed"


class IntegrationRuntimeUpdateResult(Enum):

    none = "None"
    succeed = "Succeed"
    fail = "Fail"


class IntegrationRuntimeInternalChannelEncryptionMode(Enum):

    not_set = "NotSet"
    ssl_encrypted = "SslEncrypted"
    not_encrypted = "NotEncrypted"


class ManagedIntegrationRuntimeNodeStatus(Enum):

    starting = "Starting"
    available = "Available"
    recycling = "Recycling"
    unavailable = "Unavailable"


class IntegrationRuntimeEntityReferenceType(Enum):

    integration_runtime_reference = "IntegrationRuntimeReference"
    linked_service_reference = "LinkedServiceReference"


class IntegrationRuntimeSsisCatalogPricingTier(Enum):

    basic = "Basic"
    standard = "Standard"
    premium = "Premium"
    premium_rs = "PremiumRS"


class IntegrationRuntimeLicenseType(Enum):

    base_price = "BasePrice"
    license_included = "LicenseIncluded"


class IntegrationRuntimeEdition(Enum):

    standard = "Standard"
    enterprise = "Enterprise"


class SsisObjectMetadataType(Enum):

    folder = "Folder"
    project = "Project"
    package = "Package"
    environment = "Environment"


class IntegrationRuntimeAuthKeyName(Enum):

    auth_key1 = "authKey1"
    auth_key2 = "authKey2"
