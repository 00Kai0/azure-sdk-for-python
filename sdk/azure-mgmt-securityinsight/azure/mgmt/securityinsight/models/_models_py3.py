# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class DataConnector(Model):
    """Data connector.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AADDataConnector, AATPDataConnector, ASCDataConnector,
    AwsCloudTrailDataConnector, MCASDataConnector, MDATPDataConnector,
    OfficeDataConnector, TIDataConnector

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'AzureActiveDirectory': 'AADDataConnector', 'AzureAdvancedThreatProtection': 'AATPDataConnector', 'AzureSecurityCenter': 'ASCDataConnector', 'AmazonWebServicesCloudTrail': 'AwsCloudTrailDataConnector', 'MicrosoftCloudAppSecurity': 'MCASDataConnector', 'MicrosoftDefenderAdvancedThreatProtection': 'MDATPDataConnector', 'Office365': 'OfficeDataConnector', 'ThreatIntelligence': 'TIDataConnector'}
    }

    def __init__(self, *, etag: str=None, **kwargs) -> None:
        super(DataConnector, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.etag = etag
        self.kind = None


class AADDataConnector(DataConnector):
    """Represents AAD (Azure Active Directory) data connector.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    :param data_types: The available data types for the connector.
    :type data_types:
     ~azure.mgmt.securityinsight.models.AlertsDataTypeOfDataConnector
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'data_types': {'key': 'properties.dataTypes', 'type': 'AlertsDataTypeOfDataConnector'},
    }

    def __init__(self, *, etag: str=None, tenant_id: str=None, data_types=None, **kwargs) -> None:
        super(AADDataConnector, self).__init__(etag=etag, **kwargs)
        self.tenant_id = tenant_id
        self.data_types = data_types
        self.kind = 'AzureActiveDirectory'


class AATPDataConnector(DataConnector):
    """Represents AATP (Azure Advanced Threat Protection) data connector.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    :param data_types: The available data types for the connector.
    :type data_types:
     ~azure.mgmt.securityinsight.models.AlertsDataTypeOfDataConnector
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'data_types': {'key': 'properties.dataTypes', 'type': 'AlertsDataTypeOfDataConnector'},
    }

    def __init__(self, *, etag: str=None, tenant_id: str=None, data_types=None, **kwargs) -> None:
        super(AATPDataConnector, self).__init__(etag=etag, **kwargs)
        self.tenant_id = tenant_id
        self.data_types = data_types
        self.kind = 'AzureAdvancedThreatProtection'


class Entity(Model):
    """Specific entity.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AccountEntity, AzureResourceEntity,
    CloudApplicationEntity, DnsEntity, FileEntity, FileHashEntity, HostEntity,
    IpEntity, MalwareEntity, ProcessEntity, RegistryKeyEntity,
    RegistryValueEntity, SecurityAlert, SecurityGroupEntity, UrlEntity

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'Account': 'AccountEntity', 'AzureResource': 'AzureResourceEntity', 'CloudApplication': 'CloudApplicationEntity', 'DnsResolution': 'DnsEntity', 'File': 'FileEntity', 'FileHash': 'FileHashEntity', 'Host': 'HostEntity', 'Ip': 'IpEntity', 'Malware': 'MalwareEntity', 'Process': 'ProcessEntity', 'RegistryKey': 'RegistryKeyEntity', 'RegistryValue': 'RegistryValueEntity', 'SecurityAlert': 'SecurityAlert', 'SecurityGroup': 'SecurityGroupEntity', 'Url': 'UrlEntity'}
    }

    def __init__(self, **kwargs) -> None:
        super(Entity, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.kind = None


class AccountEntity(Entity):
    """Represents an account entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar aad_tenant_id: The Azure Active Directory tenant id.
    :vartype aad_tenant_id: str
    :ivar aad_user_id: The Azure Active Directory user id.
    :vartype aad_user_id: str
    :ivar account_name: The name of the account. This field should hold only
     the name without any domain added to it, i.e. administrator.
    :vartype account_name: str
    :ivar display_name: The display name of the account.
    :vartype display_name: str
    :ivar host_entity_id: The Host entity id that contains the account in case
     it is a local account (not domain joined)
    :vartype host_entity_id: str
    :ivar is_domain_joined: Determines whether this is a domain account.
    :vartype is_domain_joined: bool
    :ivar nt_domain: The NetBIOS domain name as it appears in the alert format
     â€“ domain\\username. Examples: NT AUTHORITY.
    :vartype nt_domain: str
    :ivar object_guid: The objectGUID attribute is a single-value attribute
     that is the unique identifier for the object, assigned by active
     directory.
    :vartype object_guid: str
    :ivar puid: The Azure Active Directory Passport User ID.
    :vartype puid: str
    :ivar sid: The account security identifier, e.g. S-1-5-18.
    :vartype sid: str
    :ivar upn_suffix: The user principal name suffix for the account, in some
     cases it is also the domain name. Examples: contoso.com.
    :vartype upn_suffix: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'aad_tenant_id': {'readonly': True},
        'aad_user_id': {'readonly': True},
        'account_name': {'readonly': True},
        'display_name': {'readonly': True},
        'host_entity_id': {'readonly': True},
        'is_domain_joined': {'readonly': True},
        'nt_domain': {'readonly': True},
        'object_guid': {'readonly': True},
        'puid': {'readonly': True},
        'sid': {'readonly': True},
        'upn_suffix': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'aad_tenant_id': {'key': 'properties.aadTenantId', 'type': 'str'},
        'aad_user_id': {'key': 'properties.aadUserId', 'type': 'str'},
        'account_name': {'key': 'properties.accountName', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'host_entity_id': {'key': 'properties.hostEntityId', 'type': 'str'},
        'is_domain_joined': {'key': 'properties.isDomainJoined', 'type': 'bool'},
        'nt_domain': {'key': 'properties.ntDomain', 'type': 'str'},
        'object_guid': {'key': 'properties.objectGuid', 'type': 'str'},
        'puid': {'key': 'properties.puid', 'type': 'str'},
        'sid': {'key': 'properties.sid', 'type': 'str'},
        'upn_suffix': {'key': 'properties.upnSuffix', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(AccountEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.aad_tenant_id = None
        self.aad_user_id = None
        self.account_name = None
        self.display_name = None
        self.host_entity_id = None
        self.is_domain_joined = None
        self.nt_domain = None
        self.object_guid = None
        self.puid = None
        self.sid = None
        self.upn_suffix = None
        self.kind = 'Account'


class ResourceWithEtag(Model):
    """An azure resource object with an Etag property.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
    }

    def __init__(self, *, etag: str=None, **kwargs) -> None:
        super(ResourceWithEtag, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.etag = etag


class ActionRequest(ResourceWithEtag):
    """Action for alert rule.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param trigger_uri: Logic App Callback URL for this specific workflow.
    :type trigger_uri: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'trigger_uri': {'key': 'properties.triggerUri', 'type': 'str'},
    }

    def __init__(self, *, etag: str=None, trigger_uri: str=None, **kwargs) -> None:
        super(ActionRequest, self).__init__(etag=etag, **kwargs)
        self.trigger_uri = trigger_uri


class Resource(Model):
    """An azure resource object.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class ActionResponse(Resource):
    """Action for alert rule.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the action.
    :type etag: str
    :param workflow_id: The name of the logic app's workflow.
    :type workflow_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'workflow_id': {'key': 'properties.workflowId', 'type': 'str'},
    }

    def __init__(self, *, etag: str=None, workflow_id: str=None, **kwargs) -> None:
        super(ActionResponse, self).__init__(**kwargs)
        self.etag = etag
        self.workflow_id = workflow_id


class Aggregations(Model):
    """The aggregation.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: CasesAggregation

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'CasesAggregation': 'CasesAggregation'}
    }

    def __init__(self, **kwargs) -> None:
        super(Aggregations, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.kind = None


class AggregationsKind1(Model):
    """Describes an Azure resource with kind.

    :param kind: The kind of the setting. Possible values include:
     'CasesAggregation'
    :type kind: str or ~azure.mgmt.securityinsight.models.AggregationsKind
    """

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    def __init__(self, *, kind=None, **kwargs) -> None:
        super(AggregationsKind1, self).__init__(**kwargs)
        self.kind = kind


class AlertRule(Model):
    """Alert rule.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: FusionAlertRule,
    MicrosoftSecurityIncidentCreationAlertRule, ScheduledAlertRule

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'Fusion': 'FusionAlertRule', 'MicrosoftSecurityIncidentCreation': 'MicrosoftSecurityIncidentCreationAlertRule', 'Scheduled': 'ScheduledAlertRule'}
    }

    def __init__(self, *, etag: str=None, **kwargs) -> None:
        super(AlertRule, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.etag = etag
        self.kind = None


class AlertRuleKind1(Model):
    """Describes an Azure resource with kind.

    :param kind: The kind of the alert rule. Possible values include:
     'Scheduled', 'MicrosoftSecurityIncidentCreation', 'Fusion'
    :type kind: str or ~azure.mgmt.securityinsight.models.AlertRuleKind
    """

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    def __init__(self, *, kind=None, **kwargs) -> None:
        super(AlertRuleKind1, self).__init__(**kwargs)
        self.kind = kind


class AlertRuleTemplate(Model):
    """Alert rule template.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: FusionAlertRuleTemplate,
    MicrosoftSecurityIncidentCreationAlertRuleTemplate,
    ScheduledAlertRuleTemplate

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'Fusion': 'FusionAlertRuleTemplate', 'MicrosoftSecurityIncidentCreation': 'MicrosoftSecurityIncidentCreationAlertRuleTemplate', 'Scheduled': 'ScheduledAlertRuleTemplate'}
    }

    def __init__(self, **kwargs) -> None:
        super(AlertRuleTemplate, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.kind = None


class AlertRuleTemplatePropertiesBase(Model):
    """Base alert rule template property bag.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param alert_rules_created_by_template_count: the number of alert rules
     that were created by this template
    :type alert_rules_created_by_template_count: int
    :ivar created_date_utc: The time that this alert rule template has been
     added.
    :vartype created_date_utc: datetime
    :param description: The description of the alert rule template.
    :type description: str
    :param display_name: The display name for alert rule template.
    :type display_name: str
    :param required_data_connectors: The required data connectors for this
     template
    :type required_data_connectors:
     list[~azure.mgmt.securityinsight.models.DataConnectorStatus]
    :param status: The alert rule template status. Possible values include:
     'Installed', 'Available', 'NotAvailable'
    :type status: str or ~azure.mgmt.securityinsight.models.TemplateStatus
    :param tactics: The tactics of the alert rule template
    :type tactics: list[str or
     ~azure.mgmt.securityinsight.models.AttackTactic]
    """

    _validation = {
        'created_date_utc': {'readonly': True},
    }

    _attribute_map = {
        'alert_rules_created_by_template_count': {'key': 'alertRulesCreatedByTemplateCount', 'type': 'int'},
        'created_date_utc': {'key': 'createdDateUTC', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'required_data_connectors': {'key': 'requiredDataConnectors', 'type': '[DataConnectorStatus]'},
        'status': {'key': 'status', 'type': 'str'},
        'tactics': {'key': 'tactics', 'type': '[str]'},
    }

    def __init__(self, *, alert_rules_created_by_template_count: int=None, description: str=None, display_name: str=None, required_data_connectors=None, status=None, tactics=None, **kwargs) -> None:
        super(AlertRuleTemplatePropertiesBase, self).__init__(**kwargs)
        self.alert_rules_created_by_template_count = alert_rules_created_by_template_count
        self.created_date_utc = None
        self.description = description
        self.display_name = display_name
        self.required_data_connectors = required_data_connectors
        self.status = status
        self.tactics = tactics


class AlertsDataTypeOfDataConnector(Model):
    """Alerts data type for data connectors.

    :param alerts: Alerts data type connection.
    :type alerts:
     ~azure.mgmt.securityinsight.models.AlertsDataTypeOfDataConnectorAlerts
    """

    _attribute_map = {
        'alerts': {'key': 'alerts', 'type': 'AlertsDataTypeOfDataConnectorAlerts'},
    }

    def __init__(self, *, alerts=None, **kwargs) -> None:
        super(AlertsDataTypeOfDataConnector, self).__init__(**kwargs)
        self.alerts = alerts


class DataConnectorDataTypeCommon(Model):
    """Common field for data type in data connectors.

    :param state: Describe whether this data type connection is enabled or
     not. Possible values include: 'Enabled', 'Disabled'
    :type state: str or ~azure.mgmt.securityinsight.models.DataTypeState
    """

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(self, *, state=None, **kwargs) -> None:
        super(DataConnectorDataTypeCommon, self).__init__(**kwargs)
        self.state = state


class AlertsDataTypeOfDataConnectorAlerts(DataConnectorDataTypeCommon):
    """Alerts data type connection.

    :param state: Describe whether this data type connection is enabled or
     not. Possible values include: 'Enabled', 'Disabled'
    :type state: str or ~azure.mgmt.securityinsight.models.DataTypeState
    """

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(self, *, state=None, **kwargs) -> None:
        super(AlertsDataTypeOfDataConnectorAlerts, self).__init__(state=state, **kwargs)


class ASCDataConnector(DataConnector):
    """Represents ASC (Azure Security Center) data connector.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param data_types: The available data types for the connector.
    :type data_types:
     ~azure.mgmt.securityinsight.models.AlertsDataTypeOfDataConnector
    :param subscription_id: The subscription id to connect to, and get the
     data from.
    :type subscription_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'data_types': {'key': 'properties.dataTypes', 'type': 'AlertsDataTypeOfDataConnector'},
        'subscription_id': {'key': 'properties.subscriptionId', 'type': 'str'},
    }

    def __init__(self, *, etag: str=None, data_types=None, subscription_id: str=None, **kwargs) -> None:
        super(ASCDataConnector, self).__init__(etag=etag, **kwargs)
        self.data_types = data_types
        self.subscription_id = subscription_id
        self.kind = 'AzureSecurityCenter'


class AwsCloudTrailDataConnector(DataConnector):
    """Represents Amazon Web Services CloudTrail data connector.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param aws_role_arn: The Aws Role Arn (with CloudTrailReadOnly policy)
     that is used to access the Aws account.
    :type aws_role_arn: str
    :param data_types: The available data types for the connector.
    :type data_types:
     ~azure.mgmt.securityinsight.models.AwsCloudTrailDataConnectorDataTypes
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'aws_role_arn': {'key': 'properties.awsRoleArn', 'type': 'str'},
        'data_types': {'key': 'properties.dataTypes', 'type': 'AwsCloudTrailDataConnectorDataTypes'},
    }

    def __init__(self, *, etag: str=None, aws_role_arn: str=None, data_types=None, **kwargs) -> None:
        super(AwsCloudTrailDataConnector, self).__init__(etag=etag, **kwargs)
        self.aws_role_arn = aws_role_arn
        self.data_types = data_types
        self.kind = 'AmazonWebServicesCloudTrail'


class AwsCloudTrailDataConnectorDataTypes(Model):
    """The available data types for Amazon Web Services CloudTrail data connector.

    :param logs: Logs data type.
    :type logs:
     ~azure.mgmt.securityinsight.models.AwsCloudTrailDataConnectorDataTypesLogs
    """

    _attribute_map = {
        'logs': {'key': 'logs', 'type': 'AwsCloudTrailDataConnectorDataTypesLogs'},
    }

    def __init__(self, *, logs=None, **kwargs) -> None:
        super(AwsCloudTrailDataConnectorDataTypes, self).__init__(**kwargs)
        self.logs = logs


class AwsCloudTrailDataConnectorDataTypesLogs(DataConnectorDataTypeCommon):
    """Logs data type.

    :param state: Describe whether this data type connection is enabled or
     not. Possible values include: 'Enabled', 'Disabled'
    :type state: str or ~azure.mgmt.securityinsight.models.DataTypeState
    """

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(self, *, state=None, **kwargs) -> None:
        super(AwsCloudTrailDataConnectorDataTypesLogs, self).__init__(state=state, **kwargs)


class AzureResourceEntity(Entity):
    """Represents an azure resource entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar resource_id: The azure resource id of the resource
    :vartype resource_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'resource_id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'resource_id': {'key': 'properties.resourceId', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(AzureResourceEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.resource_id = None
        self.kind = 'AzureResource'


class Bookmark(ResourceWithEtag):
    """Represents a bookmark in Azure Security Insights.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param created: The time the bookmark was created
    :type created: datetime
    :param created_by: Describes a user that created the bookmark
    :type created_by: ~azure.mgmt.securityinsight.models.UserInfo
    :param display_name: Required. The display name of the bookmark
    :type display_name: str
    :param labels: List of labels relevant to this bookmark
    :type labels: list[str]
    :param notes: The notes of the bookmark
    :type notes: str
    :param query: Required. The query of the bookmark.
    :type query: str
    :param query_result: The query result of the bookmark.
    :type query_result: str
    :param updated: The last time the bookmark was updated
    :type updated: datetime
    :param updated_by: Describes a user that updated the bookmark
    :type updated_by: ~azure.mgmt.securityinsight.models.UserInfo
    :param incident_info: Describes an incident that relates to bookmark
    :type incident_info: ~azure.mgmt.securityinsight.models.IncidentInfo
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'display_name': {'required': True},
        'query': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'created': {'key': 'properties.created', 'type': 'iso-8601'},
        'created_by': {'key': 'properties.createdBy', 'type': 'UserInfo'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'labels': {'key': 'properties.labels', 'type': '[str]'},
        'notes': {'key': 'properties.notes', 'type': 'str'},
        'query': {'key': 'properties.query', 'type': 'str'},
        'query_result': {'key': 'properties.queryResult', 'type': 'str'},
        'updated': {'key': 'properties.updated', 'type': 'iso-8601'},
        'updated_by': {'key': 'properties.updatedBy', 'type': 'UserInfo'},
        'incident_info': {'key': 'properties.incidentInfo', 'type': 'IncidentInfo'},
    }

    def __init__(self, *, display_name: str, query: str, etag: str=None, created=None, created_by=None, labels=None, notes: str=None, query_result: str=None, updated=None, updated_by=None, incident_info=None, **kwargs) -> None:
        super(Bookmark, self).__init__(etag=etag, **kwargs)
        self.created = created
        self.created_by = created_by
        self.display_name = display_name
        self.labels = labels
        self.notes = notes
        self.query = query
        self.query_result = query_result
        self.updated = updated
        self.updated_by = updated_by
        self.incident_info = incident_info


class RelationBase(Resource):
    """Represents a relation.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :ivar kind: The type of relation node. Possible values include:
     'CasesToBookmarks'
    :vartype kind: str or ~azure.mgmt.securityinsight.models.RelationTypes
    :param etag: ETag for relation
    :type etag: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
    }

    def __init__(self, *, etag: str=None, **kwargs) -> None:
        super(RelationBase, self).__init__(**kwargs)
        self.kind = None
        self.etag = etag


class BookmarkRelation(RelationBase):
    """Represents a bookmark relation.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :ivar kind: The type of relation node. Possible values include:
     'CasesToBookmarks'
    :vartype kind: str or ~azure.mgmt.securityinsight.models.RelationTypes
    :param etag: ETag for relation
    :type etag: str
    :param relation_name: Required. Name of relation
    :type relation_name: str
    :param bookmark_id: Required. The case related bookmark id
    :type bookmark_id: str
    :param case_identifier: Required. The case identifier
    :type case_identifier: str
    :param case_title: The case title
    :type case_title: str
    :param case_severity: The case severity
    :type case_severity: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'readonly': True},
        'relation_name': {'required': True},
        'bookmark_id': {'required': True},
        'case_identifier': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'relation_name': {'key': 'properties.relationName', 'type': 'str'},
        'bookmark_id': {'key': 'properties.bookmarkId', 'type': 'str'},
        'case_identifier': {'key': 'properties.caseIdentifier', 'type': 'str'},
        'case_title': {'key': 'properties.caseTitle', 'type': 'str'},
        'case_severity': {'key': 'properties.caseSeverity', 'type': 'str'},
    }

    def __init__(self, *, relation_name: str, bookmark_id: str, case_identifier: str, etag: str=None, case_title: str=None, case_severity: str=None, **kwargs) -> None:
        super(BookmarkRelation, self).__init__(etag=etag, **kwargs)
        self.relation_name = relation_name
        self.bookmark_id = bookmark_id
        self.case_identifier = case_identifier
        self.case_title = case_title
        self.case_severity = case_severity


class Case(ResourceWithEtag):
    """Represents a case in Azure Security Insights.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :ivar case_number: a sequential number
    :vartype case_number: int
    :param close_reason: The reason the case was closed. Possible values
     include: 'Resolved', 'Dismissed', 'TruePositive', 'FalsePositive', 'Other'
    :type close_reason: str or ~azure.mgmt.securityinsight.models.CloseReason
    :param closed_reason_text: the case close reason details
    :type closed_reason_text: str
    :ivar created_time_utc: The time the case was created
    :vartype created_time_utc: datetime
    :param description: The description of the case
    :type description: str
    :param end_time_utc: The end time of the case
    :type end_time_utc: datetime
    :param labels: List of labels relevant to this case
    :type labels: list[str]
    :ivar last_comment: the last comment in the case
    :vartype last_comment: str
    :ivar last_updated_time_utc: The last time the case was updated
    :vartype last_updated_time_utc: datetime
    :param owner: Describes a user that the case is assigned to
    :type owner: ~azure.mgmt.securityinsight.models.UserInfo
    :ivar related_alert_ids: List of related alert identifiers
    :vartype related_alert_ids: list[str]
    :param severity: Required. The severity of the case. Possible values
     include: 'Critical', 'High', 'Medium', 'Low', 'Informational'
    :type severity: str or ~azure.mgmt.securityinsight.models.CaseSeverity
    :param start_time_utc: Required. The start time of the case
    :type start_time_utc: datetime
    :param status: Required. The status of the case. Possible values include:
     'Draft', 'New', 'InProgress', 'Closed'
    :type status: str or ~azure.mgmt.securityinsight.models.CaseStatus
    :param title: Required. The title of the case
    :type title: str
    :ivar total_comments: the number of total comments in the case
    :vartype total_comments: int
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'case_number': {'readonly': True},
        'created_time_utc': {'readonly': True},
        'last_comment': {'readonly': True},
        'last_updated_time_utc': {'readonly': True},
        'related_alert_ids': {'readonly': True},
        'severity': {'required': True},
        'start_time_utc': {'required': True},
        'status': {'required': True},
        'title': {'required': True},
        'total_comments': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'case_number': {'key': 'properties.caseNumber', 'type': 'int'},
        'close_reason': {'key': 'properties.closeReason', 'type': 'str'},
        'closed_reason_text': {'key': 'properties.closedReasonText', 'type': 'str'},
        'created_time_utc': {'key': 'properties.createdTimeUtc', 'type': 'iso-8601'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'end_time_utc': {'key': 'properties.endTimeUtc', 'type': 'iso-8601'},
        'labels': {'key': 'properties.labels', 'type': '[str]'},
        'last_comment': {'key': 'properties.lastComment', 'type': 'str'},
        'last_updated_time_utc': {'key': 'properties.lastUpdatedTimeUtc', 'type': 'iso-8601'},
        'owner': {'key': 'properties.owner', 'type': 'UserInfo'},
        'related_alert_ids': {'key': 'properties.relatedAlertIds', 'type': '[str]'},
        'severity': {'key': 'properties.severity', 'type': 'str'},
        'start_time_utc': {'key': 'properties.startTimeUtc', 'type': 'iso-8601'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'title': {'key': 'properties.title', 'type': 'str'},
        'total_comments': {'key': 'properties.totalComments', 'type': 'int'},
    }

    def __init__(self, *, severity, start_time_utc, status, title: str, etag: str=None, close_reason=None, closed_reason_text: str=None, description: str=None, end_time_utc=None, labels=None, owner=None, **kwargs) -> None:
        super(Case, self).__init__(etag=etag, **kwargs)
        self.case_number = None
        self.close_reason = close_reason
        self.closed_reason_text = closed_reason_text
        self.created_time_utc = None
        self.description = description
        self.end_time_utc = end_time_utc
        self.labels = labels
        self.last_comment = None
        self.last_updated_time_utc = None
        self.owner = owner
        self.related_alert_ids = None
        self.severity = severity
        self.start_time_utc = start_time_utc
        self.status = status
        self.title = title
        self.total_comments = None


class CaseComment(Resource):
    """Represents a case comment.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :ivar created_time_utc: The time the comment was created
    :vartype created_time_utc: datetime
    :param message: Required. The comment message
    :type message: str
    :ivar user_info: Describes the user that created the comment
    :vartype user_info: ~azure.mgmt.securityinsight.models.UserInfo
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'created_time_utc': {'readonly': True},
        'message': {'required': True},
        'user_info': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'created_time_utc': {'key': 'properties.createdTimeUtc', 'type': 'iso-8601'},
        'message': {'key': 'properties.message', 'type': 'str'},
        'user_info': {'key': 'properties.userInfo', 'type': 'UserInfo'},
    }

    def __init__(self, *, message: str, **kwargs) -> None:
        super(CaseComment, self).__init__(**kwargs)
        self.created_time_utc = None
        self.message = message
        self.user_info = None


class CaseRelation(RelationBase):
    """Represents a case relation.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :ivar kind: The type of relation node. Possible values include:
     'CasesToBookmarks'
    :vartype kind: str or ~azure.mgmt.securityinsight.models.RelationTypes
    :param etag: ETag for relation
    :type etag: str
    :param relation_name: Required. Name of relation
    :type relation_name: str
    :param bookmark_id: Required. The case related bookmark id
    :type bookmark_id: str
    :param case_identifier: Required. The case identifier
    :type case_identifier: str
    :param bookmark_name: The case related bookmark name
    :type bookmark_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'readonly': True},
        'relation_name': {'required': True},
        'bookmark_id': {'required': True},
        'case_identifier': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'relation_name': {'key': 'properties.relationName', 'type': 'str'},
        'bookmark_id': {'key': 'properties.bookmarkId', 'type': 'str'},
        'case_identifier': {'key': 'properties.caseIdentifier', 'type': 'str'},
        'bookmark_name': {'key': 'properties.bookmarkName', 'type': 'str'},
    }

    def __init__(self, *, relation_name: str, bookmark_id: str, case_identifier: str, etag: str=None, bookmark_name: str=None, **kwargs) -> None:
        super(CaseRelation, self).__init__(etag=etag, **kwargs)
        self.relation_name = relation_name
        self.bookmark_id = bookmark_id
        self.case_identifier = case_identifier
        self.bookmark_name = bookmark_name


class CasesAggregation(Aggregations):
    """Represents aggregations results for cases.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param aggregation_by_severity: Aggregations results by case severity.
    :type aggregation_by_severity:
     ~azure.mgmt.securityinsight.models.CasesAggregationBySeverityProperties
    :param aggregation_by_status: Aggregations results by case status.
    :type aggregation_by_status:
     ~azure.mgmt.securityinsight.models.CasesAggregationByStatusProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'aggregation_by_severity': {'key': 'properties.aggregationBySeverity', 'type': 'CasesAggregationBySeverityProperties'},
        'aggregation_by_status': {'key': 'properties.aggregationByStatus', 'type': 'CasesAggregationByStatusProperties'},
    }

    def __init__(self, *, aggregation_by_severity=None, aggregation_by_status=None, **kwargs) -> None:
        super(CasesAggregation, self).__init__(**kwargs)
        self.aggregation_by_severity = aggregation_by_severity
        self.aggregation_by_status = aggregation_by_status
        self.kind = 'CasesAggregation'


class CasesAggregationBySeverityProperties(Model):
    """Aggregative results of cases by severity property bag.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar total_critical_severity: Total amount of open cases with severity
     Critical
    :vartype total_critical_severity: int
    :ivar total_high_severity: Total amount of open cases with severity High
    :vartype total_high_severity: int
    :ivar total_informational_severity: Total amount of open cases with
     severity Informational
    :vartype total_informational_severity: int
    :ivar total_low_severity: Total amount of open cases with severity Low
    :vartype total_low_severity: int
    :ivar total_medium_severity: Total amount of open cases with severity
     medium
    :vartype total_medium_severity: int
    """

    _validation = {
        'total_critical_severity': {'readonly': True},
        'total_high_severity': {'readonly': True},
        'total_informational_severity': {'readonly': True},
        'total_low_severity': {'readonly': True},
        'total_medium_severity': {'readonly': True},
    }

    _attribute_map = {
        'total_critical_severity': {'key': 'totalCriticalSeverity', 'type': 'int'},
        'total_high_severity': {'key': 'totalHighSeverity', 'type': 'int'},
        'total_informational_severity': {'key': 'totalInformationalSeverity', 'type': 'int'},
        'total_low_severity': {'key': 'totalLowSeverity', 'type': 'int'},
        'total_medium_severity': {'key': 'totalMediumSeverity', 'type': 'int'},
    }

    def __init__(self, **kwargs) -> None:
        super(CasesAggregationBySeverityProperties, self).__init__(**kwargs)
        self.total_critical_severity = None
        self.total_high_severity = None
        self.total_informational_severity = None
        self.total_low_severity = None
        self.total_medium_severity = None


class CasesAggregationByStatusProperties(Model):
    """Aggregative results of cases by status property bag.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar total_dismissed_status: Total amount of open cases with status
     Dismissed
    :vartype total_dismissed_status: int
    :ivar total_in_progress_status: Total amount of open cases with status
     InProgress
    :vartype total_in_progress_status: int
    :ivar total_new_status: Total amount of open cases with status New
    :vartype total_new_status: int
    :ivar total_resolved_status: Total amount of open cases with status
     Resolved
    :vartype total_resolved_status: int
    """

    _validation = {
        'total_dismissed_status': {'readonly': True},
        'total_in_progress_status': {'readonly': True},
        'total_new_status': {'readonly': True},
        'total_resolved_status': {'readonly': True},
    }

    _attribute_map = {
        'total_dismissed_status': {'key': 'totalDismissedStatus', 'type': 'int'},
        'total_in_progress_status': {'key': 'totalInProgressStatus', 'type': 'int'},
        'total_new_status': {'key': 'totalNewStatus', 'type': 'int'},
        'total_resolved_status': {'key': 'totalResolvedStatus', 'type': 'int'},
    }

    def __init__(self, **kwargs) -> None:
        super(CasesAggregationByStatusProperties, self).__init__(**kwargs)
        self.total_dismissed_status = None
        self.total_in_progress_status = None
        self.total_new_status = None
        self.total_resolved_status = None


class CloudApplicationEntity(Entity):
    """Represents a cloud application entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar app_id: The technical identifier of the application.
    :vartype app_id: int
    :ivar app_name: The name of the related cloud application.
    :vartype app_name: str
    :ivar instance_name: The user defined instance name of the cloud
     application. It is often used to distinguish between several applications
     of the same type that a customer has.
    :vartype instance_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'app_id': {'readonly': True},
        'app_name': {'readonly': True},
        'instance_name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'app_id': {'key': 'properties.appId', 'type': 'int'},
        'app_name': {'key': 'properties.appName', 'type': 'str'},
        'instance_name': {'key': 'properties.instanceName', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(CloudApplicationEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.app_id = None
        self.app_name = None
        self.instance_name = None
        self.kind = 'CloudApplication'


class CloudError(Model):
    """Error response structure.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar code: An identifier for the error. Codes are invariant and are
     intended to be consumed programmatically.
    :vartype code: str
    :ivar message: A message describing the error, intended to be suitable for
     display in a user interface.
    :vartype message: str
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'error.code', 'type': 'str'},
        'message': {'key': 'error.message', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(CloudError, self).__init__(**kwargs)
        self.code = None
        self.message = None


class CloudErrorException(HttpOperationError):
    """Server responsed with exception of type: 'CloudError'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(CloudErrorException, self).__init__(deserialize, response, 'CloudError', *args)


class DataConnectorKind1(Model):
    """Describes an Azure resource with kind.

    :param kind: The kind of the data connector. Possible values include:
     'AzureActiveDirectory', 'AzureSecurityCenter',
     'MicrosoftCloudAppSecurity', 'ThreatIntelligence', 'Office365',
     'AmazonWebServicesCloudTrail', 'AzureAdvancedThreatProtection',
     'MicrosoftDefenderAdvancedThreatProtection'
    :type kind: str or ~azure.mgmt.securityinsight.models.DataConnectorKind
    """

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    def __init__(self, *, kind=None, **kwargs) -> None:
        super(DataConnectorKind1, self).__init__(**kwargs)
        self.kind = kind


class DataConnectorStatus(Model):
    """alert rule template data connector status.

    :param connector_id: the connector id
    :type connector_id: str
    :param data_types: The data types availability map
    :type data_types: dict[str, str or
     ~azure.mgmt.securityinsight.models.DataTypeStatus]
    """

    _attribute_map = {
        'connector_id': {'key': 'connectorId', 'type': 'str'},
        'data_types': {'key': 'dataTypes', 'type': '{str}'},
    }

    def __init__(self, *, connector_id: str=None, data_types=None, **kwargs) -> None:
        super(DataConnectorStatus, self).__init__(**kwargs)
        self.connector_id = connector_id
        self.data_types = data_types


class DataConnectorTenantId(Model):
    """Properties data connector on tenant level.

    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    """

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
    }

    def __init__(self, *, tenant_id: str=None, **kwargs) -> None:
        super(DataConnectorTenantId, self).__init__(**kwargs)
        self.tenant_id = tenant_id


class DataConnectorWithAlertsProperties(Model):
    """Data connector properties.

    :param data_types: The available data types for the connector.
    :type data_types:
     ~azure.mgmt.securityinsight.models.AlertsDataTypeOfDataConnector
    """

    _attribute_map = {
        'data_types': {'key': 'dataTypes', 'type': 'AlertsDataTypeOfDataConnector'},
    }

    def __init__(self, *, data_types=None, **kwargs) -> None:
        super(DataConnectorWithAlertsProperties, self).__init__(**kwargs)
        self.data_types = data_types


class DnsEntity(Entity):
    """Represents a dns entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar dns_server_ip_entity_id: An ip entity id for the dns server
     resolving the request
    :vartype dns_server_ip_entity_id: str
    :ivar domain_name: The name of the dns record associated with the alert
    :vartype domain_name: str
    :ivar host_ip_address_entity_id: An ip entity id for the dns request
     client
    :vartype host_ip_address_entity_id: str
    :ivar ip_address_entity_ids: Ip entity identifiers for the resolved ip
     address.
    :vartype ip_address_entity_ids: list[str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'dns_server_ip_entity_id': {'readonly': True},
        'domain_name': {'readonly': True},
        'host_ip_address_entity_id': {'readonly': True},
        'ip_address_entity_ids': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'dns_server_ip_entity_id': {'key': 'properties.dnsServerIpEntityId', 'type': 'str'},
        'domain_name': {'key': 'properties.domainName', 'type': 'str'},
        'host_ip_address_entity_id': {'key': 'properties.hostIpAddressEntityId', 'type': 'str'},
        'ip_address_entity_ids': {'key': 'properties.ipAddressEntityIds', 'type': '[str]'},
    }

    def __init__(self, **kwargs) -> None:
        super(DnsEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.dns_server_ip_entity_id = None
        self.domain_name = None
        self.host_ip_address_entity_id = None
        self.ip_address_entity_ids = None
        self.kind = 'DnsResolution'


class EntityCommonProperties(Model):
    """Entity common property bag.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    """

    _validation = {
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
    }

    _attribute_map = {
        'additional_data': {'key': 'additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'friendlyName', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(EntityCommonProperties, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None


class EntityExpandParameters(Model):
    """The parameters required to execute an expand operation on the given entity.

    :param end_time: The end date filter, so the only expansion results
     returned are before this date.
    :type end_time: datetime
    :param expansion_id: The Id of the expansion to perform.
    :type expansion_id: str
    :param start_time: The start date filter, so the only expansion results
     returned are after this date.
    :type start_time: datetime
    """

    _attribute_map = {
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'expansion_id': {'key': 'expansionId', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
    }

    def __init__(self, *, end_time=None, expansion_id: str=None, start_time=None, **kwargs) -> None:
        super(EntityExpandParameters, self).__init__(**kwargs)
        self.end_time = end_time
        self.expansion_id = expansion_id
        self.start_time = start_time


class EntityExpandResponse(Model):
    """The entity expansion result operation response.

    :param meta_data: The metadata from the expansion operation results.
    :type meta_data:
     ~azure.mgmt.securityinsight.models.ExpansionResultsMetadata
    :param value: The expansion result values.
    :type value: ~azure.mgmt.securityinsight.models.EntityExpandResponseValue
    """

    _attribute_map = {
        'meta_data': {'key': 'metaData', 'type': 'ExpansionResultsMetadata'},
        'value': {'key': 'value', 'type': 'EntityExpandResponseValue'},
    }

    def __init__(self, *, meta_data=None, value=None, **kwargs) -> None:
        super(EntityExpandResponse, self).__init__(**kwargs)
        self.meta_data = meta_data
        self.value = value


class EntityExpandResponseValue(Model):
    """The expansion result values.

    :param entities: Array of the expansion result entities.
    :type entities: list[~azure.mgmt.securityinsight.models.Entity]
    """

    _attribute_map = {
        'entities': {'key': 'entities', 'type': '[Entity]'},
    }

    def __init__(self, *, entities=None, **kwargs) -> None:
        super(EntityExpandResponseValue, self).__init__(**kwargs)
        self.entities = entities


class EntityKind1(Model):
    """Describes an entity with kind.

    :param kind: The kind of the entity. Possible values include: 'Account',
     'Host', 'File', 'AzureResource', 'CloudApplication', 'DnsResolution',
     'FileHash', 'Ip', 'Malware', 'Process', 'RegistryKey', 'RegistryValue',
     'SecurityGroup', 'Url', 'SecurityAlert', 'Bookmark'
    :type kind: str or ~azure.mgmt.securityinsight.models.EntityKind
    """

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    def __init__(self, *, kind=None, **kwargs) -> None:
        super(EntityKind1, self).__init__(**kwargs)
        self.kind = kind


class EntityQuery(Resource):
    """Specific entity query.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param data_sources: List of the data sources that are required to run the
     query
    :type data_sources: list[str]
    :param display_name: The query display name
    :type display_name: str
    :param input_entity_type: The type of the query's source entity. Possible
     values include: 'Account', 'Host', 'File', 'AzureResource',
     'CloudApplication', 'DNS', 'FileHash', 'IP', 'Malware', 'Process',
     'RegistryKey', 'RegistryValue', 'SecurityGroup', 'URL', 'SecurityAlert',
     'HuntingBookmark'
    :type input_entity_type: str or
     ~azure.mgmt.securityinsight.models.EntityType
    :param input_fields: List of the fields of the source entity that are
     required to run the query
    :type input_fields: list[str]
    :param output_entity_types: List of the desired output types to be
     constructed from the result
    :type output_entity_types: list[str or
     ~azure.mgmt.securityinsight.models.EntityType]
    :param query_template: The template query string to be parsed and
     formatted
    :type query_template: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'data_sources': {'key': 'properties.dataSources', 'type': '[str]'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'input_entity_type': {'key': 'properties.inputEntityType', 'type': 'str'},
        'input_fields': {'key': 'properties.inputFields', 'type': '[str]'},
        'output_entity_types': {'key': 'properties.outputEntityTypes', 'type': '[str]'},
        'query_template': {'key': 'properties.queryTemplate', 'type': 'str'},
    }

    def __init__(self, *, data_sources=None, display_name: str=None, input_entity_type=None, input_fields=None, output_entity_types=None, query_template: str=None, **kwargs) -> None:
        super(EntityQuery, self).__init__(**kwargs)
        self.data_sources = data_sources
        self.display_name = display_name
        self.input_entity_type = input_entity_type
        self.input_fields = input_fields
        self.output_entity_types = output_entity_types
        self.query_template = query_template


class ExpansionResultAggregation(Model):
    """Information of a specific aggregation in the expansion result.

    All required parameters must be populated in order to send to Azure.

    :param aggregation_type: The common type of the aggregation. (for e.g.
     entity field name)
    :type aggregation_type: str
    :param count: Required. Total number of aggregations of the given kind
     (and aggregationType if given) in the expansion result.
    :type count: int
    :param display_name: The display name of the aggregation by type.
    :type display_name: str
    :param entity_kind: Required. The kind of the aggregated entity. Possible
     values include: 'Account', 'Host', 'File', 'AzureResource',
     'CloudApplication', 'DnsResolution', 'FileHash', 'Ip', 'Malware',
     'Process', 'RegistryKey', 'RegistryValue', 'SecurityGroup', 'Url',
     'SecurityAlert', 'Bookmark'
    :type entity_kind: str or ~azure.mgmt.securityinsight.models.EntityKind
    """

    _validation = {
        'count': {'required': True},
        'entity_kind': {'required': True},
    }

    _attribute_map = {
        'aggregation_type': {'key': 'aggregationType', 'type': 'str'},
        'count': {'key': 'count', 'type': 'int'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'entity_kind': {'key': 'entityKind', 'type': 'str'},
    }

    def __init__(self, *, count: int, entity_kind, aggregation_type: str=None, display_name: str=None, **kwargs) -> None:
        super(ExpansionResultAggregation, self).__init__(**kwargs)
        self.aggregation_type = aggregation_type
        self.count = count
        self.display_name = display_name
        self.entity_kind = entity_kind


class ExpansionResultsMetadata(Model):
    """Expansion result metadata.

    :param aggregations: Information of the aggregated nodes in the expansion
     result.
    :type aggregations:
     list[~azure.mgmt.securityinsight.models.ExpansionResultAggregation]
    """

    _attribute_map = {
        'aggregations': {'key': 'aggregations', 'type': '[ExpansionResultAggregation]'},
    }

    def __init__(self, *, aggregations=None, **kwargs) -> None:
        super(ExpansionResultsMetadata, self).__init__(**kwargs)
        self.aggregations = aggregations


class FileEntity(Entity):
    """Represents a file entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar directory: The full path to the file.
    :vartype directory: str
    :ivar file_hash_entity_ids: The file hash entity identifiers associated
     with this file
    :vartype file_hash_entity_ids: list[str]
    :ivar file_name: The file name without path (some alerts might not include
     path).
    :vartype file_name: str
    :ivar host_entity_id: The Host entity id which the file belongs to
    :vartype host_entity_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'directory': {'readonly': True},
        'file_hash_entity_ids': {'readonly': True},
        'file_name': {'readonly': True},
        'host_entity_id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'directory': {'key': 'properties.directory', 'type': 'str'},
        'file_hash_entity_ids': {'key': 'properties.fileHashEntityIds', 'type': '[str]'},
        'file_name': {'key': 'properties.fileName', 'type': 'str'},
        'host_entity_id': {'key': 'properties.hostEntityId', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(FileEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.directory = None
        self.file_hash_entity_ids = None
        self.file_name = None
        self.host_entity_id = None
        self.kind = 'File'


class FileHashEntity(Entity):
    """Represents a file hash entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar algorithm: The hash algorithm type. Possible values include:
     'Unknown', 'MD5', 'SHA1', 'SHA256', 'SHA256AC'
    :vartype algorithm: str or
     ~azure.mgmt.securityinsight.models.FileHashAlgorithm
    :ivar hash_value: The file hash value.
    :vartype hash_value: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'algorithm': {'readonly': True},
        'hash_value': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'algorithm': {'key': 'properties.algorithm', 'type': 'str'},
        'hash_value': {'key': 'properties.hashValue', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(FileHashEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.algorithm = None
        self.hash_value = None
        self.kind = 'FileHash'


class FusionAlertRule(AlertRule):
    """Represents Fusion alert rule.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param alert_rule_template_name: Required. The Name of the alert rule
     template used to create this rule.
    :type alert_rule_template_name: str
    :ivar description: The description of the alert rule.
    :vartype description: str
    :ivar display_name: The display name for alerts created by this alert
     rule.
    :vartype display_name: str
    :param enabled: Required. Determines whether this alert rule is enabled or
     disabled.
    :type enabled: bool
    :ivar last_modified_utc: The last time that this alert has been modified.
    :vartype last_modified_utc: datetime
    :ivar severity: The severity for alerts created by this alert rule.
     Possible values include: 'High', 'Medium', 'Low', 'Informational'
    :vartype severity: str or ~azure.mgmt.securityinsight.models.AlertSeverity
    :ivar tactics: The tactics of the alert rule
    :vartype tactics: list[str or
     ~azure.mgmt.securityinsight.models.AttackTactic]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'alert_rule_template_name': {'required': True},
        'description': {'readonly': True},
        'display_name': {'readonly': True},
        'enabled': {'required': True},
        'last_modified_utc': {'readonly': True},
        'severity': {'readonly': True},
        'tactics': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'alert_rule_template_name': {'key': 'properties.alertRuleTemplateName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'enabled': {'key': 'properties.enabled', 'type': 'bool'},
        'last_modified_utc': {'key': 'properties.lastModifiedUtc', 'type': 'iso-8601'},
        'severity': {'key': 'properties.severity', 'type': 'str'},
        'tactics': {'key': 'properties.tactics', 'type': '[str]'},
    }

    def __init__(self, *, alert_rule_template_name: str, enabled: bool, etag: str=None, **kwargs) -> None:
        super(FusionAlertRule, self).__init__(etag=etag, **kwargs)
        self.alert_rule_template_name = alert_rule_template_name
        self.description = None
        self.display_name = None
        self.enabled = enabled
        self.last_modified_utc = None
        self.severity = None
        self.tactics = None
        self.kind = 'Fusion'


class FusionAlertRuleTemplate(AlertRuleTemplate):
    """Represents Fusion alert rule template.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param alert_rules_created_by_template_count: the number of alert rules
     that were created by this template
    :type alert_rules_created_by_template_count: int
    :ivar created_date_utc: The time that this alert rule template has been
     added.
    :vartype created_date_utc: datetime
    :param description: The description of the alert rule template.
    :type description: str
    :param display_name: The display name for alert rule template.
    :type display_name: str
    :param required_data_connectors: The required data connectors for this
     template
    :type required_data_connectors:
     list[~azure.mgmt.securityinsight.models.DataConnectorStatus]
    :param status: The alert rule template status. Possible values include:
     'Installed', 'Available', 'NotAvailable'
    :type status: str or ~azure.mgmt.securityinsight.models.TemplateStatus
    :param tactics: The tactics of the alert rule template
    :type tactics: list[str or
     ~azure.mgmt.securityinsight.models.AttackTactic]
    :param severity: Required. The severity for alerts created by this alert
     rule. Possible values include: 'High', 'Medium', 'Low', 'Informational'
    :type severity: str or ~azure.mgmt.securityinsight.models.AlertSeverity
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'created_date_utc': {'readonly': True},
        'severity': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'alert_rules_created_by_template_count': {'key': 'properties.alertRulesCreatedByTemplateCount', 'type': 'int'},
        'created_date_utc': {'key': 'properties.createdDateUTC', 'type': 'iso-8601'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'required_data_connectors': {'key': 'properties.requiredDataConnectors', 'type': '[DataConnectorStatus]'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'tactics': {'key': 'properties.tactics', 'type': '[str]'},
        'severity': {'key': 'properties.severity', 'type': 'str'},
    }

    def __init__(self, *, severity, alert_rules_created_by_template_count: int=None, description: str=None, display_name: str=None, required_data_connectors=None, status=None, tactics=None, **kwargs) -> None:
        super(FusionAlertRuleTemplate, self).__init__(**kwargs)
        self.alert_rules_created_by_template_count = alert_rules_created_by_template_count
        self.created_date_utc = None
        self.description = description
        self.display_name = display_name
        self.required_data_connectors = required_data_connectors
        self.status = status
        self.tactics = tactics
        self.severity = severity
        self.kind = 'Fusion'


class GeoLocation(Model):
    """The geo-location context attached to the ip entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar asn: Autonomous System Number
    :vartype asn: int
    :ivar city: City name
    :vartype city: str
    :ivar country_code: The country code according to ISO 3166 format
    :vartype country_code: str
    :ivar country_name: Country name according to ISO 3166 Alpha 2: the
     lowercase of the English Short Name
    :vartype country_name: str
    :ivar latitude: The longitude of the identified location, expressed as a
     floating point number with range of -180 to 180, with positive numbers
     representing East and negative numbers representing West. Latitude and
     longitude are derived from the city or postal code.
    :vartype latitude: float
    :ivar longitude: The latitude of the identified location, expressed as a
     floating point number with range of - 90 to 90, with positive numbers
     representing North and negative numbers representing South. Latitude and
     longitude are derived from the city or postal code.
    :vartype longitude: float
    :ivar state: State name
    :vartype state: str
    """

    _validation = {
        'asn': {'readonly': True},
        'city': {'readonly': True},
        'country_code': {'readonly': True},
        'country_name': {'readonly': True},
        'latitude': {'readonly': True},
        'longitude': {'readonly': True},
        'state': {'readonly': True},
    }

    _attribute_map = {
        'asn': {'key': 'asn', 'type': 'int'},
        'city': {'key': 'city', 'type': 'str'},
        'country_code': {'key': 'countryCode', 'type': 'str'},
        'country_name': {'key': 'countryName', 'type': 'str'},
        'latitude': {'key': 'latitude', 'type': 'float'},
        'longitude': {'key': 'longitude', 'type': 'float'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(GeoLocation, self).__init__(**kwargs)
        self.asn = None
        self.city = None
        self.country_code = None
        self.country_name = None
        self.latitude = None
        self.longitude = None
        self.state = None


class HostEntity(Entity):
    """Represents a host entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar azure_id: The azure resource id of the VM.
    :vartype azure_id: str
    :ivar dns_domain: The DNS domain that this host belongs to. Should contain
     the compete DNS suffix for the domain
    :vartype dns_domain: str
    :ivar host_name: The hostname without the domain suffix.
    :vartype host_name: str
    :ivar is_domain_joined: Determines whether this host belongs to a domain.
    :vartype is_domain_joined: bool
    :ivar net_bios_name: The host name (pre-windows2000).
    :vartype net_bios_name: str
    :ivar nt_domain: The NT domain that this host belongs to.
    :vartype nt_domain: str
    :ivar oms_agent_id: The OMS agent id, if the host has OMS agent installed.
    :vartype oms_agent_id: str
    :param os_family: The operating system type. Possible values include:
     'Linux', 'Windows', 'Android', 'IOS'
    :type os_family: str or ~azure.mgmt.securityinsight.models.OSFamily
    :ivar os_version: A free text representation of the operating system. This
     field is meant to hold specific versions the are more fine grained than
     OSFamily or future values not supported by OSFamily enumeration
    :vartype os_version: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'azure_id': {'readonly': True},
        'dns_domain': {'readonly': True},
        'host_name': {'readonly': True},
        'is_domain_joined': {'readonly': True},
        'net_bios_name': {'readonly': True},
        'nt_domain': {'readonly': True},
        'oms_agent_id': {'readonly': True},
        'os_version': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'azure_id': {'key': 'properties.azureID', 'type': 'str'},
        'dns_domain': {'key': 'properties.dnsDomain', 'type': 'str'},
        'host_name': {'key': 'properties.hostName', 'type': 'str'},
        'is_domain_joined': {'key': 'properties.isDomainJoined', 'type': 'bool'},
        'net_bios_name': {'key': 'properties.netBiosName', 'type': 'str'},
        'nt_domain': {'key': 'properties.ntDomain', 'type': 'str'},
        'oms_agent_id': {'key': 'properties.omsAgentID', 'type': 'str'},
        'os_family': {'key': 'properties.osFamily', 'type': 'OSFamily'},
        'os_version': {'key': 'properties.osVersion', 'type': 'str'},
    }

    def __init__(self, *, os_family=None, **kwargs) -> None:
        super(HostEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.azure_id = None
        self.dns_domain = None
        self.host_name = None
        self.is_domain_joined = None
        self.net_bios_name = None
        self.nt_domain = None
        self.oms_agent_id = None
        self.os_family = os_family
        self.os_version = None
        self.kind = 'Host'


class IncidentInfo(Model):
    """Describes related incident information for the bookmark.

    All required parameters must be populated in order to send to Azure.

    :param incident_id: Required. Incident Id
    :type incident_id: str
    :param severity: Required. The severity of the incident. Possible values
     include: 'Critical', 'High', 'Medium', 'Low', 'Informational'
    :type severity: str or ~azure.mgmt.securityinsight.models.IncidentSeverity
    :param title: Required. The title of the incident
    :type title: str
    :param relation_name: Required. Relation Name
    :type relation_name: str
    """

    _validation = {
        'incident_id': {'required': True},
        'severity': {'required': True},
        'title': {'required': True},
        'relation_name': {'required': True},
    }

    _attribute_map = {
        'incident_id': {'key': 'incidentId', 'type': 'str'},
        'severity': {'key': 'severity', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
        'relation_name': {'key': 'relationName', 'type': 'str'},
    }

    def __init__(self, *, incident_id: str, severity, title: str, relation_name: str, **kwargs) -> None:
        super(IncidentInfo, self).__init__(**kwargs)
        self.incident_id = incident_id
        self.severity = severity
        self.title = title
        self.relation_name = relation_name


class IpEntity(Entity):
    """Represents an ip entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar address: The IP address as string, e.g. 127.0.0.1 (either in Ipv4 or
     Ipv6)
    :vartype address: str
    :param location: The geo-location context attached to the ip entity
    :type location: ~azure.mgmt.securityinsight.models.GeoLocation
    :ivar threat_intelligence: A list of TI contexts attached to the ip
     entity.
    :vartype threat_intelligence:
     list[~azure.mgmt.securityinsight.models.ThreatIntelligence]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'address': {'readonly': True},
        'threat_intelligence': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'address': {'key': 'properties.address', 'type': 'str'},
        'location': {'key': 'properties.location', 'type': 'GeoLocation'},
        'threat_intelligence': {'key': 'properties.threatIntelligence', 'type': '[ThreatIntelligence]'},
    }

    def __init__(self, *, location=None, **kwargs) -> None:
        super(IpEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.address = None
        self.location = location
        self.threat_intelligence = None
        self.kind = 'Ip'


class MalwareEntity(Entity):
    """Represents a malware entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar category: The malware category by the vendor, e.g. Trojan
    :vartype category: str
    :ivar file_entity_ids: List of linked file entity identifiers on which the
     malware was found
    :vartype file_entity_ids: list[str]
    :ivar malware_name: The malware name by the vendor, e.g. Win32/Toga!rfn
    :vartype malware_name: str
    :ivar process_entity_ids: List of linked process entity identifiers on
     which the malware was found.
    :vartype process_entity_ids: list[str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'category': {'readonly': True},
        'file_entity_ids': {'readonly': True},
        'malware_name': {'readonly': True},
        'process_entity_ids': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'category': {'key': 'properties.category', 'type': 'str'},
        'file_entity_ids': {'key': 'properties.fileEntityIds', 'type': '[str]'},
        'malware_name': {'key': 'properties.malwareName', 'type': 'str'},
        'process_entity_ids': {'key': 'properties.processEntityIds', 'type': '[str]'},
    }

    def __init__(self, **kwargs) -> None:
        super(MalwareEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.category = None
        self.file_entity_ids = None
        self.malware_name = None
        self.process_entity_ids = None
        self.kind = 'Malware'


class MCASDataConnector(DataConnector):
    """Represents MCAS (Microsoft Cloud App Security) data connector.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    :param data_types: The available data types for the connector.
    :type data_types:
     ~azure.mgmt.securityinsight.models.MCASDataConnectorDataTypes
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'data_types': {'key': 'properties.dataTypes', 'type': 'MCASDataConnectorDataTypes'},
    }

    def __init__(self, *, etag: str=None, tenant_id: str=None, data_types=None, **kwargs) -> None:
        super(MCASDataConnector, self).__init__(etag=etag, **kwargs)
        self.tenant_id = tenant_id
        self.data_types = data_types
        self.kind = 'MicrosoftCloudAppSecurity'


class MCASDataConnectorDataTypes(AlertsDataTypeOfDataConnector):
    """The available data types for MCAS (Microsoft Cloud App Security) data
    connector.

    :param alerts: Alerts data type connection.
    :type alerts:
     ~azure.mgmt.securityinsight.models.AlertsDataTypeOfDataConnectorAlerts
    :param discovery_logs: Discovery log data type connection.
    :type discovery_logs:
     ~azure.mgmt.securityinsight.models.MCASDataConnectorDataTypesDiscoveryLogs
    """

    _attribute_map = {
        'alerts': {'key': 'alerts', 'type': 'AlertsDataTypeOfDataConnectorAlerts'},
        'discovery_logs': {'key': 'discoveryLogs', 'type': 'MCASDataConnectorDataTypesDiscoveryLogs'},
    }

    def __init__(self, *, alerts=None, discovery_logs=None, **kwargs) -> None:
        super(MCASDataConnectorDataTypes, self).__init__(alerts=alerts, **kwargs)
        self.discovery_logs = discovery_logs


class MCASDataConnectorDataTypesDiscoveryLogs(DataConnectorDataTypeCommon):
    """Discovery log data type connection.

    :param state: Describe whether this data type connection is enabled or
     not. Possible values include: 'Enabled', 'Disabled'
    :type state: str or ~azure.mgmt.securityinsight.models.DataTypeState
    """

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(self, *, state=None, **kwargs) -> None:
        super(MCASDataConnectorDataTypesDiscoveryLogs, self).__init__(state=state, **kwargs)


class MDATPDataConnector(DataConnector):
    """Represents MDATP (Microsoft Defender Advanced Threat Protection) data
    connector.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    :param data_types: The available data types for the connector.
    :type data_types:
     ~azure.mgmt.securityinsight.models.AlertsDataTypeOfDataConnector
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'data_types': {'key': 'properties.dataTypes', 'type': 'AlertsDataTypeOfDataConnector'},
    }

    def __init__(self, *, etag: str=None, tenant_id: str=None, data_types=None, **kwargs) -> None:
        super(MDATPDataConnector, self).__init__(etag=etag, **kwargs)
        self.tenant_id = tenant_id
        self.data_types = data_types
        self.kind = 'MicrosoftDefenderAdvancedThreatProtection'


class MicrosoftSecurityIncidentCreationAlertRule(AlertRule):
    """Represents MicrosoftSecurityIncidentCreation rule.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param display_names_filter: the alerts' displayNames on which the cases
     will be generated
    :type display_names_filter: list[str]
    :param product_filter: Required. The alerts' productName on which the
     cases will be generated. Possible values include: 'Microsoft Cloud App
     Security', 'Azure Security Center', 'Azure Advanced Threat Protection',
     'Azure Active Directory Identity Protection', 'Azure Security Center for
     IoT'
    :type product_filter: str or
     ~azure.mgmt.securityinsight.models.MicrosoftSecurityProductName
    :param severities_filter: the alerts' severities on which the cases will
     be generated
    :type severities_filter: list[str or
     ~azure.mgmt.securityinsight.models.AlertSeverity]
    :param alert_rule_template_name: The Name of the alert rule template used
     to create this rule.
    :type alert_rule_template_name: str
    :param description: The description of the alert rule.
    :type description: str
    :param display_name: Required. The display name for alerts created by this
     alert rule.
    :type display_name: str
    :param enabled: Required. Determines whether this alert rule is enabled or
     disabled.
    :type enabled: bool
    :ivar last_modified_utc: The last time that this alert has been modified.
    :vartype last_modified_utc: datetime
    :param tactics: The tactics of the alert rule
    :type tactics: list[str or
     ~azure.mgmt.securityinsight.models.AttackTactic]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'product_filter': {'required': True},
        'display_name': {'required': True},
        'enabled': {'required': True},
        'last_modified_utc': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'display_names_filter': {'key': 'properties.displayNamesFilter', 'type': '[str]'},
        'product_filter': {'key': 'properties.productFilter', 'type': 'str'},
        'severities_filter': {'key': 'properties.severitiesFilter', 'type': '[str]'},
        'alert_rule_template_name': {'key': 'properties.alertRuleTemplateName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'enabled': {'key': 'properties.enabled', 'type': 'bool'},
        'last_modified_utc': {'key': 'properties.lastModifiedUtc', 'type': 'iso-8601'},
        'tactics': {'key': 'properties.tactics', 'type': '[str]'},
    }

    def __init__(self, *, product_filter, display_name: str, enabled: bool, etag: str=None, display_names_filter=None, severities_filter=None, alert_rule_template_name: str=None, description: str=None, tactics=None, **kwargs) -> None:
        super(MicrosoftSecurityIncidentCreationAlertRule, self).__init__(etag=etag, **kwargs)
        self.display_names_filter = display_names_filter
        self.product_filter = product_filter
        self.severities_filter = severities_filter
        self.alert_rule_template_name = alert_rule_template_name
        self.description = description
        self.display_name = display_name
        self.enabled = enabled
        self.last_modified_utc = None
        self.tactics = tactics
        self.kind = 'MicrosoftSecurityIncidentCreation'


class MicrosoftSecurityIncidentCreationAlertRuleCommonProperties(Model):
    """MicrosoftSecurityIncidentCreation rule common property bag.

    All required parameters must be populated in order to send to Azure.

    :param display_names_filter: the alerts' displayNames on which the cases
     will be generated
    :type display_names_filter: list[str]
    :param product_filter: Required. The alerts' productName on which the
     cases will be generated. Possible values include: 'Microsoft Cloud App
     Security', 'Azure Security Center', 'Azure Advanced Threat Protection',
     'Azure Active Directory Identity Protection', 'Azure Security Center for
     IoT'
    :type product_filter: str or
     ~azure.mgmt.securityinsight.models.MicrosoftSecurityProductName
    :param severities_filter: the alerts' severities on which the cases will
     be generated
    :type severities_filter: list[str or
     ~azure.mgmt.securityinsight.models.AlertSeverity]
    """

    _validation = {
        'product_filter': {'required': True},
    }

    _attribute_map = {
        'display_names_filter': {'key': 'displayNamesFilter', 'type': '[str]'},
        'product_filter': {'key': 'productFilter', 'type': 'str'},
        'severities_filter': {'key': 'severitiesFilter', 'type': '[str]'},
    }

    def __init__(self, *, product_filter, display_names_filter=None, severities_filter=None, **kwargs) -> None:
        super(MicrosoftSecurityIncidentCreationAlertRuleCommonProperties, self).__init__(**kwargs)
        self.display_names_filter = display_names_filter
        self.product_filter = product_filter
        self.severities_filter = severities_filter


class MicrosoftSecurityIncidentCreationAlertRuleTemplate(AlertRuleTemplate):
    """Represents MicrosoftSecurityIncidentCreation rule template.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param alert_rules_created_by_template_count: Required. the number of
     alert rules that were created by this template
    :type alert_rules_created_by_template_count: int
    :ivar created_date_utc: Required. The time that this alert rule template
     has been added.
    :vartype created_date_utc: datetime
    :param description: Required. The description of the alert rule template.
    :type description: str
    :param display_name: Required. The display name for alert rule template.
    :type display_name: str
    :param required_data_connectors: The required data connectors for this
     template
    :type required_data_connectors:
     list[~azure.mgmt.securityinsight.models.DataConnectorStatus]
    :param status: Required. The alert rule template status. Possible values
     include: 'Installed', 'Available', 'NotAvailable'
    :type status: str or ~azure.mgmt.securityinsight.models.TemplateStatus
    :param tactics: The tactics of the alert rule template
    :type tactics: list[str or
     ~azure.mgmt.securityinsight.models.AttackTactic]
    :param display_names_filter: the alerts' displayNames on which the cases
     will be generated
    :type display_names_filter: list[str]
    :param product_filter: Required. The alerts' productName on which the
     cases will be generated. Possible values include: 'Microsoft Cloud App
     Security', 'Azure Security Center', 'Azure Advanced Threat Protection',
     'Azure Active Directory Identity Protection', 'Azure Security Center for
     IoT'
    :type product_filter: str or
     ~azure.mgmt.securityinsight.models.MicrosoftSecurityProductName
    :param severities_filter: the alerts' severities on which the cases will
     be generated
    :type severities_filter: list[str or
     ~azure.mgmt.securityinsight.models.AlertSeverity]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'alert_rules_created_by_template_count': {'required': True},
        'created_date_utc': {'required': True, 'readonly': True},
        'description': {'required': True},
        'display_name': {'required': True},
        'status': {'required': True},
        'product_filter': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'alert_rules_created_by_template_count': {'key': 'properties.alertRulesCreatedByTemplateCount', 'type': 'int'},
        'created_date_utc': {'key': 'properties.createdDateUTC', 'type': 'iso-8601'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'required_data_connectors': {'key': 'properties.requiredDataConnectors', 'type': '[DataConnectorStatus]'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'tactics': {'key': 'properties.tactics', 'type': '[str]'},
        'display_names_filter': {'key': 'properties.displayNamesFilter', 'type': '[str]'},
        'product_filter': {'key': 'properties.productFilter', 'type': 'str'},
        'severities_filter': {'key': 'properties.severitiesFilter', 'type': '[str]'},
    }

    def __init__(self, *, alert_rules_created_by_template_count: int, description: str, display_name: str, status, product_filter, required_data_connectors=None, tactics=None, display_names_filter=None, severities_filter=None, **kwargs) -> None:
        super(MicrosoftSecurityIncidentCreationAlertRuleTemplate, self).__init__(**kwargs)
        self.alert_rules_created_by_template_count = alert_rules_created_by_template_count
        self.created_date_utc = None
        self.description = description
        self.display_name = display_name
        self.required_data_connectors = required_data_connectors
        self.status = status
        self.tactics = tactics
        self.display_names_filter = display_names_filter
        self.product_filter = product_filter
        self.severities_filter = severities_filter
        self.kind = 'MicrosoftSecurityIncidentCreation'


class OfficeConsent(Resource):
    """Consent for Office365 tenant that already made.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param tenant_id: The tenantId of the Office365 with the consent.
    :type tenant_id: str
    :ivar tenant_name: The tenant name of the Office365 with the consent.
    :vartype tenant_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'tenant_name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'tenant_name': {'key': 'properties.tenantName', 'type': 'str'},
    }

    def __init__(self, *, tenant_id: str=None, **kwargs) -> None:
        super(OfficeConsent, self).__init__(**kwargs)
        self.tenant_id = tenant_id
        self.tenant_name = None


class OfficeDataConnector(DataConnector):
    """Represents office data connector.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    :param data_types: The available data types for the connector.
    :type data_types:
     ~azure.mgmt.securityinsight.models.OfficeDataConnectorDataTypes
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'data_types': {'key': 'properties.dataTypes', 'type': 'OfficeDataConnectorDataTypes'},
    }

    def __init__(self, *, etag: str=None, tenant_id: str=None, data_types=None, **kwargs) -> None:
        super(OfficeDataConnector, self).__init__(etag=etag, **kwargs)
        self.tenant_id = tenant_id
        self.data_types = data_types
        self.kind = 'Office365'


class OfficeDataConnectorDataTypes(Model):
    """The available data types for office data connector.

    :param exchange: Exchange data type connection.
    :type exchange:
     ~azure.mgmt.securityinsight.models.OfficeDataConnectorDataTypesExchange
    :param share_point: SharePoint data type connection.
    :type share_point:
     ~azure.mgmt.securityinsight.models.OfficeDataConnectorDataTypesSharePoint
    """

    _attribute_map = {
        'exchange': {'key': 'exchange', 'type': 'OfficeDataConnectorDataTypesExchange'},
        'share_point': {'key': 'sharePoint', 'type': 'OfficeDataConnectorDataTypesSharePoint'},
    }

    def __init__(self, *, exchange=None, share_point=None, **kwargs) -> None:
        super(OfficeDataConnectorDataTypes, self).__init__(**kwargs)
        self.exchange = exchange
        self.share_point = share_point


class OfficeDataConnectorDataTypesExchange(DataConnectorDataTypeCommon):
    """Exchange data type connection.

    :param state: Describe whether this data type connection is enabled or
     not. Possible values include: 'Enabled', 'Disabled'
    :type state: str or ~azure.mgmt.securityinsight.models.DataTypeState
    """

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(self, *, state=None, **kwargs) -> None:
        super(OfficeDataConnectorDataTypesExchange, self).__init__(state=state, **kwargs)


class OfficeDataConnectorDataTypesSharePoint(DataConnectorDataTypeCommon):
    """SharePoint data type connection.

    :param state: Describe whether this data type connection is enabled or
     not. Possible values include: 'Enabled', 'Disabled'
    :type state: str or ~azure.mgmt.securityinsight.models.DataTypeState
    """

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(self, *, state=None, **kwargs) -> None:
        super(OfficeDataConnectorDataTypesSharePoint, self).__init__(state=state, **kwargs)


class Operation(Model):
    """Operation provided by provider.

    :param display: Properties of the operation
    :type display: ~azure.mgmt.securityinsight.models.OperationDisplay
    :param name: Name of the operation
    :type name: str
    """

    _attribute_map = {
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, *, display=None, name: str=None, **kwargs) -> None:
        super(Operation, self).__init__(**kwargs)
        self.display = display
        self.name = name


class OperationDisplay(Model):
    """Properties of the operation.

    :param description: Description of the operation
    :type description: str
    :param operation: Operation name
    :type operation: str
    :param provider: Provider name
    :type provider: str
    :param resource: Resource name
    :type resource: str
    """

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
    }

    def __init__(self, *, description: str=None, operation: str=None, provider: str=None, resource: str=None, **kwargs) -> None:
        super(OperationDisplay, self).__init__(**kwargs)
        self.description = description
        self.operation = operation
        self.provider = provider
        self.resource = resource


class ProcessEntity(Entity):
    """Represents a process entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar account_entity_id: The account entity id running the processes.
    :vartype account_entity_id: str
    :ivar command_line: The command line used to create the process
    :vartype command_line: str
    :ivar creation_time_utc: The time when the process started to run
    :vartype creation_time_utc: datetime
    :param elevation_token: The elevation token associated with the process.
     Possible values include: 'Default', 'Full', 'Limited'
    :type elevation_token: str or
     ~azure.mgmt.securityinsight.models.ElevationToken
    :ivar host_entity_id: The host entity id on which the process was running
    :vartype host_entity_id: str
    :ivar host_logon_session_entity_id: The session entity id in which the
     process was running
    :vartype host_logon_session_entity_id: str
    :ivar image_file_entity_id: Image file entity id
    :vartype image_file_entity_id: str
    :ivar parent_process_entity_id: The parent process entity id.
    :vartype parent_process_entity_id: str
    :ivar process_id: The process ID
    :vartype process_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'account_entity_id': {'readonly': True},
        'command_line': {'readonly': True},
        'creation_time_utc': {'readonly': True},
        'host_entity_id': {'readonly': True},
        'host_logon_session_entity_id': {'readonly': True},
        'image_file_entity_id': {'readonly': True},
        'parent_process_entity_id': {'readonly': True},
        'process_id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'account_entity_id': {'key': 'properties.accountEntityId', 'type': 'str'},
        'command_line': {'key': 'properties.commandLine', 'type': 'str'},
        'creation_time_utc': {'key': 'properties.creationTimeUtc', 'type': 'iso-8601'},
        'elevation_token': {'key': 'properties.elevationToken', 'type': 'ElevationToken'},
        'host_entity_id': {'key': 'properties.hostEntityId', 'type': 'str'},
        'host_logon_session_entity_id': {'key': 'properties.hostLogonSessionEntityId', 'type': 'str'},
        'image_file_entity_id': {'key': 'properties.imageFileEntityId', 'type': 'str'},
        'parent_process_entity_id': {'key': 'properties.parentProcessEntityId', 'type': 'str'},
        'process_id': {'key': 'properties.processId', 'type': 'str'},
    }

    def __init__(self, *, elevation_token=None, **kwargs) -> None:
        super(ProcessEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.account_entity_id = None
        self.command_line = None
        self.creation_time_utc = None
        self.elevation_token = elevation_token
        self.host_entity_id = None
        self.host_logon_session_entity_id = None
        self.image_file_entity_id = None
        self.parent_process_entity_id = None
        self.process_id = None
        self.kind = 'Process'


class RegistryKeyEntity(Entity):
    """Represents a registry key entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar hive: the hive that holds the registry key. Possible values include:
     'HKEY_LOCAL_MACHINE', 'HKEY_CLASSES_ROOT', 'HKEY_CURRENT_CONFIG',
     'HKEY_USERS', 'HKEY_CURRENT_USER_LOCAL_SETTINGS', 'HKEY_PERFORMANCE_DATA',
     'HKEY_PERFORMANCE_NLSTEXT', 'HKEY_PERFORMANCE_TEXT', 'HKEY_A',
     'HKEY_CURRENT_USER'
    :vartype hive: str or ~azure.mgmt.securityinsight.models.RegistryHive
    :ivar key: The registry key path.
    :vartype key: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'hive': {'readonly': True},
        'key': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'hive': {'key': 'properties.hive', 'type': 'str'},
        'key': {'key': 'properties.key', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(RegistryKeyEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.hive = None
        self.key = None
        self.kind = 'RegistryKey'


class RegistryValueEntity(Entity):
    """Represents a registry value entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar key_entity_id: The registry key entity id.
    :vartype key_entity_id: str
    :ivar value_data: String formatted representation of the value data.
    :vartype value_data: str
    :ivar value_name: The registry value name.
    :vartype value_name: str
    :ivar value_type: Specifies the data types to use when storing values in
     the registry, or identifies the data type of a value in the registry.
     Possible values include: 'None', 'Unknown', 'String', 'ExpandString',
     'Binary', 'DWord', 'MultiString', 'QWord'
    :vartype value_type: str or
     ~azure.mgmt.securityinsight.models.RegistryValueKind
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'key_entity_id': {'readonly': True},
        'value_data': {'readonly': True},
        'value_name': {'readonly': True},
        'value_type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'key_entity_id': {'key': 'properties.keyEntityId', 'type': 'str'},
        'value_data': {'key': 'properties.valueData', 'type': 'str'},
        'value_name': {'key': 'properties.valueName', 'type': 'str'},
        'value_type': {'key': 'properties.valueType', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(RegistryValueEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.key_entity_id = None
        self.value_data = None
        self.value_name = None
        self.value_type = None
        self.kind = 'RegistryValue'


class RelationNode(Model):
    """Relation node.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param relation_node_id: Relation Node Id
    :type relation_node_id: str
    :ivar relation_node_kind: The type of relation node. Possible values
     include: 'Case', 'Bookmark'
    :vartype relation_node_kind: str or
     ~azure.mgmt.securityinsight.models.RelationNodeKind
    :param etag: Etag for relation node
    :type etag: str
    :param relation_additional_properties: Additional set of properties
    :type relation_additional_properties: dict[str, str]
    """

    _validation = {
        'relation_node_kind': {'readonly': True},
    }

    _attribute_map = {
        'relation_node_id': {'key': 'relationNodeId', 'type': 'str'},
        'relation_node_kind': {'key': 'relationNodeKind', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'relation_additional_properties': {'key': 'relationAdditionalProperties', 'type': '{str}'},
    }

    def __init__(self, *, relation_node_id: str=None, etag: str=None, relation_additional_properties=None, **kwargs) -> None:
        super(RelationNode, self).__init__(**kwargs)
        self.relation_node_id = relation_node_id
        self.relation_node_kind = None
        self.etag = etag
        self.relation_additional_properties = relation_additional_properties


class RelationsModelInput(RelationBase):
    """Relation input model.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :ivar kind: The type of relation node. Possible values include:
     'CasesToBookmarks'
    :vartype kind: str or ~azure.mgmt.securityinsight.models.RelationTypes
    :param etag: ETag for relation
    :type etag: str
    :param relation_name: Name of relation
    :type relation_name: str
    :param source_relation_node: Relation source node
    :type source_relation_node:
     ~azure.mgmt.securityinsight.models.RelationNode
    :param target_relation_node: Relation target node
    :type target_relation_node:
     ~azure.mgmt.securityinsight.models.RelationNode
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'relation_name': {'key': 'properties.relationName', 'type': 'str'},
        'source_relation_node': {'key': 'properties.sourceRelationNode', 'type': 'RelationNode'},
        'target_relation_node': {'key': 'properties.targetRelationNode', 'type': 'RelationNode'},
    }

    def __init__(self, *, etag: str=None, relation_name: str=None, source_relation_node=None, target_relation_node=None, **kwargs) -> None:
        super(RelationsModelInput, self).__init__(etag=etag, **kwargs)
        self.relation_name = relation_name
        self.source_relation_node = source_relation_node
        self.target_relation_node = target_relation_node


class ScheduledAlertRule(AlertRule):
    """Represents scheduled alert rule.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param query: The query that creates alerts for this rule.
    :type query: str
    :param query_frequency: The frequency (in ISO 8601 duration format) for
     this alert rule to run.
    :type query_frequency: timedelta
    :param query_period: The period (in ISO 8601 duration format) that this
     alert rule looks at.
    :type query_period: timedelta
    :param severity: The severity for alerts created by this alert rule.
     Possible values include: 'High', 'Medium', 'Low', 'Informational'
    :type severity: str or ~azure.mgmt.securityinsight.models.AlertSeverity
    :param trigger_operator: The operation against the threshold that triggers
     alert rule. Possible values include: 'GreaterThan', 'LessThan', 'Equal',
     'NotEqual'
    :type trigger_operator: str or
     ~azure.mgmt.securityinsight.models.TriggerOperator
    :param trigger_threshold: The threshold triggers this alert rule.
    :type trigger_threshold: int
    :param alert_rule_template_name: The Name of the alert rule template used
     to create this rule.
    :type alert_rule_template_name: str
    :param description: The description of the alert rule.
    :type description: str
    :param display_name: Required. The display name for alerts created by this
     alert rule.
    :type display_name: str
    :param enabled: Required. Determines whether this alert rule is enabled or
     disabled.
    :type enabled: bool
    :ivar last_modified_utc: The last time that this alert rule has been
     modified.
    :vartype last_modified_utc: datetime
    :param suppression_duration: Required. The suppression (in ISO 8601
     duration format) to wait since last time this alert rule been triggered.
    :type suppression_duration: timedelta
    :param suppression_enabled: Required. Determines whether the suppression
     for this alert rule is enabled or disabled.
    :type suppression_enabled: bool
    :param tactics: The tactics of the alert rule
    :type tactics: list[str or
     ~azure.mgmt.securityinsight.models.AttackTactic]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'display_name': {'required': True},
        'enabled': {'required': True},
        'last_modified_utc': {'readonly': True},
        'suppression_duration': {'required': True},
        'suppression_enabled': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'query': {'key': 'properties.query', 'type': 'str'},
        'query_frequency': {'key': 'properties.queryFrequency', 'type': 'duration'},
        'query_period': {'key': 'properties.queryPeriod', 'type': 'duration'},
        'severity': {'key': 'properties.severity', 'type': 'str'},
        'trigger_operator': {'key': 'properties.triggerOperator', 'type': 'TriggerOperator'},
        'trigger_threshold': {'key': 'properties.triggerThreshold', 'type': 'int'},
        'alert_rule_template_name': {'key': 'properties.alertRuleTemplateName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'enabled': {'key': 'properties.enabled', 'type': 'bool'},
        'last_modified_utc': {'key': 'properties.lastModifiedUtc', 'type': 'iso-8601'},
        'suppression_duration': {'key': 'properties.suppressionDuration', 'type': 'duration'},
        'suppression_enabled': {'key': 'properties.suppressionEnabled', 'type': 'bool'},
        'tactics': {'key': 'properties.tactics', 'type': '[str]'},
    }

    def __init__(self, *, display_name: str, enabled: bool, suppression_duration, suppression_enabled: bool, etag: str=None, query: str=None, query_frequency=None, query_period=None, severity=None, trigger_operator=None, trigger_threshold: int=None, alert_rule_template_name: str=None, description: str=None, tactics=None, **kwargs) -> None:
        super(ScheduledAlertRule, self).__init__(etag=etag, **kwargs)
        self.query = query
        self.query_frequency = query_frequency
        self.query_period = query_period
        self.severity = severity
        self.trigger_operator = trigger_operator
        self.trigger_threshold = trigger_threshold
        self.alert_rule_template_name = alert_rule_template_name
        self.description = description
        self.display_name = display_name
        self.enabled = enabled
        self.last_modified_utc = None
        self.suppression_duration = suppression_duration
        self.suppression_enabled = suppression_enabled
        self.tactics = tactics
        self.kind = 'Scheduled'


class ScheduledAlertRuleCommonProperties(Model):
    """Schedule alert rule template property bag.

    :param query: The query that creates alerts for this rule.
    :type query: str
    :param query_frequency: The frequency (in ISO 8601 duration format) for
     this alert rule to run.
    :type query_frequency: timedelta
    :param query_period: The period (in ISO 8601 duration format) that this
     alert rule looks at.
    :type query_period: timedelta
    :param severity: The severity for alerts created by this alert rule.
     Possible values include: 'High', 'Medium', 'Low', 'Informational'
    :type severity: str or ~azure.mgmt.securityinsight.models.AlertSeverity
    :param trigger_operator: The operation against the threshold that triggers
     alert rule. Possible values include: 'GreaterThan', 'LessThan', 'Equal',
     'NotEqual'
    :type trigger_operator: str or
     ~azure.mgmt.securityinsight.models.TriggerOperator
    :param trigger_threshold: The threshold triggers this alert rule.
    :type trigger_threshold: int
    """

    _attribute_map = {
        'query': {'key': 'query', 'type': 'str'},
        'query_frequency': {'key': 'queryFrequency', 'type': 'duration'},
        'query_period': {'key': 'queryPeriod', 'type': 'duration'},
        'severity': {'key': 'severity', 'type': 'str'},
        'trigger_operator': {'key': 'triggerOperator', 'type': 'TriggerOperator'},
        'trigger_threshold': {'key': 'triggerThreshold', 'type': 'int'},
    }

    def __init__(self, *, query: str=None, query_frequency=None, query_period=None, severity=None, trigger_operator=None, trigger_threshold: int=None, **kwargs) -> None:
        super(ScheduledAlertRuleCommonProperties, self).__init__(**kwargs)
        self.query = query
        self.query_frequency = query_frequency
        self.query_period = query_period
        self.severity = severity
        self.trigger_operator = trigger_operator
        self.trigger_threshold = trigger_threshold


class ScheduledAlertRuleTemplate(AlertRuleTemplate):
    """Represents scheduled alert rule template.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param alert_rules_created_by_template_count: Required. the number of
     alert rules that were created by this template
    :type alert_rules_created_by_template_count: int
    :ivar created_date_utc: The time that this alert rule template has been
     added.
    :vartype created_date_utc: datetime
    :param description: Required. The description of the alert rule template.
    :type description: str
    :param display_name: Required. The display name for alert rule template.
    :type display_name: str
    :param required_data_connectors: The required data connectors for this
     template
    :type required_data_connectors:
     list[~azure.mgmt.securityinsight.models.DataConnectorStatus]
    :param status: Required. The alert rule template status. Possible values
     include: 'Installed', 'Available', 'NotAvailable'
    :type status: str or ~azure.mgmt.securityinsight.models.TemplateStatus
    :param tactics: The tactics of the alert rule template
    :type tactics: list[str or
     ~azure.mgmt.securityinsight.models.AttackTactic]
    :param query: Required. The query that creates alerts for this rule.
    :type query: str
    :param query_frequency: Required. The frequency (in ISO 8601 duration
     format) for this alert rule to run.
    :type query_frequency: timedelta
    :param query_period: Required. The period (in ISO 8601 duration format)
     that this alert rule looks at.
    :type query_period: timedelta
    :param severity: Required. The severity for alerts created by this alert
     rule. Possible values include: 'High', 'Medium', 'Low', 'Informational'
    :type severity: str or ~azure.mgmt.securityinsight.models.AlertSeverity
    :param trigger_operator: Required. The operation against the threshold
     that triggers alert rule. Possible values include: 'GreaterThan',
     'LessThan', 'Equal', 'NotEqual'
    :type trigger_operator: str or
     ~azure.mgmt.securityinsight.models.TriggerOperator
    :param trigger_threshold: Required. The threshold triggers this alert
     rule.
    :type trigger_threshold: int
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'alert_rules_created_by_template_count': {'required': True},
        'created_date_utc': {'readonly': True},
        'description': {'required': True},
        'display_name': {'required': True},
        'status': {'required': True},
        'query': {'required': True},
        'query_frequency': {'required': True},
        'query_period': {'required': True},
        'severity': {'required': True},
        'trigger_operator': {'required': True},
        'trigger_threshold': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'alert_rules_created_by_template_count': {'key': 'properties.alertRulesCreatedByTemplateCount', 'type': 'int'},
        'created_date_utc': {'key': 'properties.createdDateUTC', 'type': 'iso-8601'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'required_data_connectors': {'key': 'properties.requiredDataConnectors', 'type': '[DataConnectorStatus]'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'tactics': {'key': 'properties.tactics', 'type': '[str]'},
        'query': {'key': 'properties.query', 'type': 'str'},
        'query_frequency': {'key': 'properties.queryFrequency', 'type': 'duration'},
        'query_period': {'key': 'properties.queryPeriod', 'type': 'duration'},
        'severity': {'key': 'properties.severity', 'type': 'str'},
        'trigger_operator': {'key': 'properties.triggerOperator', 'type': 'TriggerOperator'},
        'trigger_threshold': {'key': 'properties.triggerThreshold', 'type': 'int'},
    }

    def __init__(self, *, alert_rules_created_by_template_count: int, description: str, display_name: str, status, query: str, query_frequency, query_period, severity, trigger_operator, trigger_threshold: int, required_data_connectors=None, tactics=None, **kwargs) -> None:
        super(ScheduledAlertRuleTemplate, self).__init__(**kwargs)
        self.alert_rules_created_by_template_count = alert_rules_created_by_template_count
        self.created_date_utc = None
        self.description = description
        self.display_name = display_name
        self.required_data_connectors = required_data_connectors
        self.status = status
        self.tactics = tactics
        self.query = query
        self.query_frequency = query_frequency
        self.query_period = query_period
        self.severity = severity
        self.trigger_operator = trigger_operator
        self.trigger_threshold = trigger_threshold
        self.kind = 'Scheduled'


class SecurityAlert(Entity):
    """Represents a security alert entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar alert_display_name: The display name of the alert.
    :vartype alert_display_name: str
    :ivar alert_type: The type name of the alert.
    :vartype alert_type: str
    :ivar compromised_entity: Display name of the main entity being reported
     on.
    :vartype compromised_entity: str
    :ivar confidence_level: The confidence level of this alert. Possible
     values include: 'Unknown', 'Low', 'High'
    :vartype confidence_level: str or
     ~azure.mgmt.securityinsight.models.ConfidenceLevel
    :ivar confidence_reasons: The confidence reasons
    :vartype confidence_reasons:
     list[~azure.mgmt.securityinsight.models.SecurityAlertPropertiesConfidenceReasonsItem]
    :ivar confidence_score: The confidence score of the alert.
    :vartype confidence_score: float
    :ivar confidence_score_status: The confidence score calculation status,
     i.e. indicating if score calculation is pending for this alert, not
     applicable or final. Possible values include: 'NotApplicable',
     'InProcess', 'NotFinal', 'Final'
    :vartype confidence_score_status: str or
     ~azure.mgmt.securityinsight.models.ConfidenceScoreStatus
    :ivar description: Alert description.
    :vartype description: str
    :ivar end_time_utc: The impact end time of the alert (the time of the last
     event contributing to the alert).
    :vartype end_time_utc: datetime
    :ivar intent: Holds the alert intent stage(s) mapping for this alert.
     Possible values include: 'Unknown', 'Probing', 'Exploitation',
     'Persistence', 'PrivilegeEscalation', 'DefenseEvasion',
     'CredentialAccess', 'Discovery', 'LateralMovement', 'Execution',
     'Collection', 'Exfiltration', 'CommandAndControl', 'Impact'
    :vartype intent: str or ~azure.mgmt.securityinsight.models.KillChainIntent
    :ivar processing_end_time: The time the alert was made available for
     consumption.
    :vartype processing_end_time: datetime
    :ivar product_component_name: The name of a component inside the product
     which generated the alert.
    :vartype product_component_name: str
    :ivar product_name: The name of the product which published this alert.
    :vartype product_name: str
    :ivar product_version: The version of the product generating the alert.
    :vartype product_version: str
    :ivar remediation_steps: Manual action items to take to remediate the
     alert.
    :vartype remediation_steps: list[str]
    :param severity: The severity of the alert. Possible values include:
     'High', 'Medium', 'Low', 'Informational'
    :type severity: str or ~azure.mgmt.securityinsight.models.AlertSeverity
    :ivar start_time_utc: The impact start time of the alert (the time of the
     first event contributing to the alert).
    :vartype start_time_utc: datetime
    :ivar status: The lifecycle status of the alert. Possible values include:
     'Unknown', 'New', 'Resolved', 'Dismissed', 'InProgress'
    :vartype status: str or ~azure.mgmt.securityinsight.models.AlertStatus
    :ivar system_alert_id: Holds the product identifier of the alert for the
     product.
    :vartype system_alert_id: str
    :ivar time_generated: The time the alert was generated.
    :vartype time_generated: datetime
    :ivar vendor_name: The name of the vendor that raise the alert.
    :vartype vendor_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'alert_display_name': {'readonly': True},
        'alert_type': {'readonly': True},
        'compromised_entity': {'readonly': True},
        'confidence_level': {'readonly': True},
        'confidence_reasons': {'readonly': True},
        'confidence_score': {'readonly': True},
        'confidence_score_status': {'readonly': True},
        'description': {'readonly': True},
        'end_time_utc': {'readonly': True},
        'intent': {'readonly': True},
        'processing_end_time': {'readonly': True},
        'product_component_name': {'readonly': True},
        'product_name': {'readonly': True},
        'product_version': {'readonly': True},
        'remediation_steps': {'readonly': True},
        'start_time_utc': {'readonly': True},
        'status': {'readonly': True},
        'system_alert_id': {'readonly': True},
        'time_generated': {'readonly': True},
        'vendor_name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'alert_display_name': {'key': 'properties.alertDisplayName', 'type': 'str'},
        'alert_type': {'key': 'properties.alertType', 'type': 'str'},
        'compromised_entity': {'key': 'properties.compromisedEntity', 'type': 'str'},
        'confidence_level': {'key': 'properties.confidenceLevel', 'type': 'str'},
        'confidence_reasons': {'key': 'properties.confidenceReasons', 'type': '[SecurityAlertPropertiesConfidenceReasonsItem]'},
        'confidence_score': {'key': 'properties.confidenceScore', 'type': 'float'},
        'confidence_score_status': {'key': 'properties.confidenceScoreStatus', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'end_time_utc': {'key': 'properties.endTimeUtc', 'type': 'iso-8601'},
        'intent': {'key': 'properties.intent', 'type': 'str'},
        'processing_end_time': {'key': 'properties.processingEndTime', 'type': 'iso-8601'},
        'product_component_name': {'key': 'properties.productComponentName', 'type': 'str'},
        'product_name': {'key': 'properties.productName', 'type': 'str'},
        'product_version': {'key': 'properties.productVersion', 'type': 'str'},
        'remediation_steps': {'key': 'properties.remediationSteps', 'type': '[str]'},
        'severity': {'key': 'properties.severity', 'type': 'str'},
        'start_time_utc': {'key': 'properties.startTimeUtc', 'type': 'iso-8601'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'system_alert_id': {'key': 'properties.systemAlertId', 'type': 'str'},
        'time_generated': {'key': 'properties.timeGenerated', 'type': 'iso-8601'},
        'vendor_name': {'key': 'properties.vendorName', 'type': 'str'},
    }

    def __init__(self, *, severity=None, **kwargs) -> None:
        super(SecurityAlert, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.alert_display_name = None
        self.alert_type = None
        self.compromised_entity = None
        self.confidence_level = None
        self.confidence_reasons = None
        self.confidence_score = None
        self.confidence_score_status = None
        self.description = None
        self.end_time_utc = None
        self.intent = None
        self.processing_end_time = None
        self.product_component_name = None
        self.product_name = None
        self.product_version = None
        self.remediation_steps = None
        self.severity = severity
        self.start_time_utc = None
        self.status = None
        self.system_alert_id = None
        self.time_generated = None
        self.vendor_name = None
        self.kind = 'SecurityAlert'


class SecurityAlertPropertiesConfidenceReasonsItem(Model):
    """confidence reason item.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar reason: The reason's description
    :vartype reason: str
    :ivar reason_type: The type (category) of the reason
    :vartype reason_type: str
    """

    _validation = {
        'reason': {'readonly': True},
        'reason_type': {'readonly': True},
    }

    _attribute_map = {
        'reason': {'key': 'reason', 'type': 'str'},
        'reason_type': {'key': 'reasonType', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(SecurityAlertPropertiesConfidenceReasonsItem, self).__init__(**kwargs)
        self.reason = None
        self.reason_type = None


class SecurityGroupEntity(Entity):
    """Represents a security group entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar distinguished_name: The group distinguished name
    :vartype distinguished_name: str
    :ivar object_guid: A single-value attribute that is the unique identifier
     for the object, assigned by active directory.
    :vartype object_guid: str
    :ivar sid: The SID attribute is a single-value attribute that specifies
     the security identifier (SID) of the group
    :vartype sid: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'distinguished_name': {'readonly': True},
        'object_guid': {'readonly': True},
        'sid': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'distinguished_name': {'key': 'properties.distinguishedName', 'type': 'str'},
        'object_guid': {'key': 'properties.objectGuid', 'type': 'str'},
        'sid': {'key': 'properties.sid', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(SecurityGroupEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.distinguished_name = None
        self.object_guid = None
        self.sid = None
        self.kind = 'SecurityGroup'


class Settings(Model):
    """The Setting.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: ToggleSettings, UebaSettings

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    _subtype_map = {
        'kind': {'ToggleSettings': 'ToggleSettings', 'UebaSettings': 'UebaSettings'}
    }

    def __init__(self, *, etag: str=None, **kwargs) -> None:
        super(Settings, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.etag = etag
        self.kind = None


class SettingsKind(Model):
    """Describes an Azure resource with kind.

    :param kind: The kind of the setting. Possible values include:
     'UebaSettings', 'ToggleSettings'
    :type kind: str or ~azure.mgmt.securityinsight.models.SettingKind
    """

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    def __init__(self, *, kind=None, **kwargs) -> None:
        super(SettingsKind, self).__init__(**kwargs)
        self.kind = kind


class ThreatIntelligence(Model):
    """ThreatIntelligence property bag.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar confidence: Confidence (must be between 0 and 1)
    :vartype confidence: float
    :ivar provider_name: Name of the provider from whom this Threat
     Intelligence information was received
    :vartype provider_name: str
    :ivar report_link: Report link
    :vartype report_link: str
    :ivar threat_description: Threat description (free text)
    :vartype threat_description: str
    :ivar threat_name: Threat name (e.g. "Jedobot malware")
    :vartype threat_name: str
    :ivar threat_type: Threat type (e.g. "Botnet")
    :vartype threat_type: str
    """

    _validation = {
        'confidence': {'readonly': True},
        'provider_name': {'readonly': True},
        'report_link': {'readonly': True},
        'threat_description': {'readonly': True},
        'threat_name': {'readonly': True},
        'threat_type': {'readonly': True},
    }

    _attribute_map = {
        'confidence': {'key': 'confidence', 'type': 'float'},
        'provider_name': {'key': 'providerName', 'type': 'str'},
        'report_link': {'key': 'reportLink', 'type': 'str'},
        'threat_description': {'key': 'threatDescription', 'type': 'str'},
        'threat_name': {'key': 'threatName', 'type': 'str'},
        'threat_type': {'key': 'threatType', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(ThreatIntelligence, self).__init__(**kwargs)
        self.confidence = None
        self.provider_name = None
        self.report_link = None
        self.threat_description = None
        self.threat_name = None
        self.threat_type = None


class TIDataConnector(DataConnector):
    """Represents threat intelligence data connector.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    :param data_types: The available data types for the connector.
    :type data_types:
     ~azure.mgmt.securityinsight.models.TIDataConnectorDataTypes
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'data_types': {'key': 'properties.dataTypes', 'type': 'TIDataConnectorDataTypes'},
    }

    def __init__(self, *, etag: str=None, tenant_id: str=None, data_types=None, **kwargs) -> None:
        super(TIDataConnector, self).__init__(etag=etag, **kwargs)
        self.tenant_id = tenant_id
        self.data_types = data_types
        self.kind = 'ThreatIntelligence'


class TIDataConnectorDataTypes(Model):
    """The available data types for TI (Threat Intelligence) data connector.

    :param indicators: Data type for indicators connection.
    :type indicators:
     ~azure.mgmt.securityinsight.models.TIDataConnectorDataTypesIndicators
    """

    _attribute_map = {
        'indicators': {'key': 'indicators', 'type': 'TIDataConnectorDataTypesIndicators'},
    }

    def __init__(self, *, indicators=None, **kwargs) -> None:
        super(TIDataConnectorDataTypes, self).__init__(**kwargs)
        self.indicators = indicators


class TIDataConnectorDataTypesIndicators(DataConnectorDataTypeCommon):
    """Data type for indicators connection.

    :param state: Describe whether this data type connection is enabled or
     not. Possible values include: 'Enabled', 'Disabled'
    :type state: str or ~azure.mgmt.securityinsight.models.DataTypeState
    """

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(self, *, state=None, **kwargs) -> None:
        super(TIDataConnectorDataTypesIndicators, self).__init__(state=state, **kwargs)


class ToggleSettings(Settings):
    """Settings with single toggle.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :param is_enabled: Determines whether the setting is enable or disabled.
    :type is_enabled: bool
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'is_enabled': {'key': 'properties.isEnabled', 'type': 'bool'},
    }

    def __init__(self, *, etag: str=None, is_enabled: bool=None, **kwargs) -> None:
        super(ToggleSettings, self).__init__(etag=etag, **kwargs)
        self.is_enabled = is_enabled
        self.kind = 'ToggleSettings'


class UebaSettings(Settings):
    """Represents settings for User and Entity Behavior Analytics enablement.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param etag: Etag of the azure resource
    :type etag: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar atp_license_status: Determines whether the tenant has ATP (Advanced
     Threat Protection) license. Possible values include: 'Enabled', 'Disabled'
    :vartype atp_license_status: str or
     ~azure.mgmt.securityinsight.models.LicenseStatus
    :param is_enabled: Determines whether User and Entity Behavior Analytics
     is enabled for this workspace.
    :type is_enabled: bool
    :ivar status_in_mcas: Determines whether User and Entity Behavior
     Analytics is enabled from MCAS (Microsoft Cloud App Security). Possible
     values include: 'Enabled', 'Disabled'
    :vartype status_in_mcas: str or
     ~azure.mgmt.securityinsight.models.StatusInMcas
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'atp_license_status': {'readonly': True},
        'status_in_mcas': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'atp_license_status': {'key': 'properties.atpLicenseStatus', 'type': 'str'},
        'is_enabled': {'key': 'properties.isEnabled', 'type': 'bool'},
        'status_in_mcas': {'key': 'properties.statusInMcas', 'type': 'str'},
    }

    def __init__(self, *, etag: str=None, is_enabled: bool=None, **kwargs) -> None:
        super(UebaSettings, self).__init__(etag=etag, **kwargs)
        self.atp_license_status = None
        self.is_enabled = is_enabled
        self.status_in_mcas = None
        self.kind = 'UebaSettings'


class UrlEntity(Entity):
    """Represents a url entity.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id
    :vartype id: str
    :ivar name: Azure resource name
    :vartype name: str
    :ivar type: Azure resource type
    :vartype type: str
    :param kind: Required. Constant filled by server.
    :type kind: str
    :ivar additional_data: A bag of custom fields that should be part of the
     entity and will be presented to the user.
    :vartype additional_data: dict[str, object]
    :ivar friendly_name: The graph item display name which is a short humanly
     readable description of the graph item instance. This property is optional
     and might be system generated.
    :vartype friendly_name: str
    :ivar url: A full URL the entity points to
    :vartype url: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'kind': {'required': True},
        'additional_data': {'readonly': True},
        'friendly_name': {'readonly': True},
        'url': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'additional_data': {'key': 'properties.additionalData', 'type': '{object}'},
        'friendly_name': {'key': 'properties.friendlyName', 'type': 'str'},
        'url': {'key': 'properties.url', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(UrlEntity, self).__init__(**kwargs)
        self.additional_data = None
        self.friendly_name = None
        self.url = None
        self.kind = 'Url'


class UserInfo(Model):
    """User information that made some action.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar email: The email of the user.
    :vartype email: str
    :ivar name: The name of the user.
    :vartype name: str
    :param object_id: Required. The object id of the user.
    :type object_id: str
    """

    _validation = {
        'email': {'readonly': True},
        'name': {'readonly': True},
        'object_id': {'required': True},
    }

    _attribute_map = {
        'email': {'key': 'email', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'object_id': {'key': 'objectId', 'type': 'str'},
    }

    def __init__(self, *, object_id: str, **kwargs) -> None:
        super(UserInfo, self).__init__(**kwargs)
        self.email = None
        self.name = None
        self.object_id = object_id
