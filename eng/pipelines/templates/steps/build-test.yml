parameters:
  AdditionalTestArgs: ''
  TestMarkArgument: ''
  EnvVars: {}
  ServiceDirectory: ''
  PythonVersion: ''
  OSName: ''
  BeforeTestSteps: []
  CoverageArg: ''
  BuildTargetingString: 'azure-*'
  ToxTestEnv: ""
  RunCoverage: ne(variables['CoverageArg'], '--disablecov')
  ToxEnvParallel: ''

steps:
  - pwsh: |
      gci -r $(Build.ArtifactStagingDirectory)

  - task: UsePythonVersion@0
    displayName: 'Use Python ${{ parameters.PythonVersion }}'
    inputs:
      versionSpec: '${{ parameters.PythonVersion }}'

  - template: eng/pipelines/templates/scripts/verify-agent-os.yml@azure-sdk-tools
    parameters:
      OSName: ${{ parameters.OSName }}

  - script: |
      pip install -r eng/ci_tools.txt
    displayName: 'Prep Environment'
    
  - ${{ parameters.BeforeTestSteps }}

  - task: PythonScript@0
    displayName: 'Run Tests'
    inputs:
      scriptPath: 'scripts/devops_tasks/setup_execute_tests.py'
      arguments: >-
        "${{ parameters.BuildTargetingString }}" 
        ${{ parameters.AdditionalTestArgs }} 
        ${{ parameters.CoverageArg }} 
        --mark_arg="${{ parameters.TestMarkArgument }}" 
        --service="${{ parameters.ServiceDirectory }}" 
        --toxenv="${{ parameters.ToxTestEnv }}"
        ${{ parameters.ToxEnvParallel }}
    env: ${{ parameters.EnvVars }}

  - task: PublishTestResults@2
    condition: always()
    inputs:
      testResultsFiles: '**/*test*.xml'
      testRunTitle: '${{ parameters.OSName }} Python ${{ parameters.PythonVersion }}'

  - pwsh: |
      $targetDir = "${{ parameters.ServiceDirectory }}"
      $whl_filter = "*[/\].tox[/\]whl[/\]log[/\]*"
      $sdist_filter = "*[/\].tox[/\]sdist[/\]log[/\]*"
      $destination = "$(Build.SourcesDirectory)/_logs"
      New-Item -ItemType Directory -Force -Path $destination
      
      Write-Host $targetDir
      if ($targetDir) {$targetDir = "$(Build.SourcesDirectory)/sdk/${{ parameters.ServiceDirectory }}"} else {$targetDir = "$(Build.SourcesDirectory)/sdk"}
      Write-Host $targetDir

      $logs = Get-ChildItem -Recurse -Path $targetDir | Where-Object { $_.FullName -like $whl_filter -or $_.FullName -like $sdist_filter }

      Write-Host $logs
      $logs | % {
        $source = $_.FullName
        $target = $source
        $array = @()

        # build up from the leaf to 5 paths up. Given the predictable structure of the .tox directories
        # this is a fairly safe assumption
        for ($i=0; $i -le 4; $i++) {
            # get the value
            $array += Split-Path -Leaf -Path $target

            # split it so we can get another
            $target = Split-Path -Path $target
        }

        # reverse the array
        [array]::Reverse($array)

        $fullDestinationName = Join-Path -Path $($destination) -ChildPath $($array -join '_')
        Write-Host $fullDestinationName
        Copy-Item -Force -Path $source -Destination $fullDestinationName
    displayName: 'Collect Tox Logs'
    condition: always()

  - task: PublishBuildArtifacts@1
    condition: always()
    displayName: 'Publish Tox Log Artifacts'
    inputs:
      artifactName: 'logs'
      pathtoPublish: '$(Build.SourcesDirectory)/_logs'

  - template: publish-coverage.yml
    parameters: 
      RunCoverage: ${{ parameters.RunCoverage }}