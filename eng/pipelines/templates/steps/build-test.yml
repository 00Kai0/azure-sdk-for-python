parameters:
  AdditionalTestArgs: ''
  TestMarkArgument: ''
  EnvVars: {}
  ServiceDirectory: ''
  PythonVersion: ''
  OSName: ''
  BeforeTestSteps: []
  BuildTargetingString: 'azure-*'
  ToxTestEnvString: 'py37-windows-test,py27-windows-test,sdist'
  ToxLintEnvString: 'lint'

steps:
  - powershell: |
        Invoke-WebRequest -Uri "https://github.com/Azure/azure-sdk-tools/releases/download/sdk-tools_14793/sdk-tools.zip" `
        -OutFile "sdk-tools.zip" | Wait-Process; Expand-Archive -Path "sdk-tools.zip" -DestinationPath "./sdk-tools/"
    workingDirectory: '$(Build.BinariesDirectory)'
    displayName: 'Download Tools Archive From Github Release and Extract it'

  - task: UsePythonVersion@0
    displayName: 'Use Python ${{ parameters.PythonVersion }}'
    inputs:
      versionSpec: '${{ parameters.PythonVersion }}'

  - task: PythonScript@0
    displayName: 'Run VerifyAgentOS script'
    inputs:
      scriptPath: '$(Build.BinariesDirectory)/sdk-tools/scripts/python/verify_agent_os.py'
      arguments: ${{ parameters.OSName }}

  - script: |
      pip install pathlib twine codecov beautifulsoup4 tox
    displayName: 'Prep Environment'

  - ${{ parameters.BeforeTestSteps }}

  - task: PythonScript@0
    displayName: 'Setup and Run Tests'
    inputs:
      scriptPath: 'scripts/devops_tasks/setup_execute_tests.py'
      arguments: >-
        "${{ parameters.BuildTargetingString }}" 
        --junitxml="junit/test-results.xml" 
        ${{ parameters.AdditionalTestArgs }} 
        --mark_arg="${{ parameters.TestMarkArgument }}" 
        --service="${{ parameters.ServiceDirectory }}" 
        --toxenv="${{ parameters.ToxTestEnvString }}"
    env: ${{ parameters.EnvVars }}

  - task: PythonScript@0
    displayName: 'Run Linters'
    inputs:
      scriptPath: 'scripts/devops_tasks/setup_execute_tests.py'
      arguments: >-
        "${{ parameters.BuildTargetingString }}" 
        --junitxml="junit/test-results.xml" 
        ${{ parameters.AdditionalTestArgs }} 
        --mark_arg="${{ parameters.TestMarkArgument }}" 
        --service="${{ parameters.ServiceDirectory }}" 
        --toxenv="${{ parameters.ToxLintEnvString }}"
    env: ${{ parameters.EnvVars }}

  - task: UsePythonVersion@0
    displayName: 'Reset Python version to ${{ parameters.PythonVersion }}'
    inputs:
      versionSpec: '${{ parameters.PythonVersion }}'

  - task: PublishTestResults@2
    displayName: 'Publish Python 2.7 Test Results'
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/test-junit-py27-*.xml'
      testRunTitle: '${{ parameters.OSName }} Python 2.7'
      mergeTestResults: true

  - task: PublishTestResults@2
    displayName: 'Publish Python 3.4 Test Results'
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/test-junit-python3.4-*.xml'
      testRunTitle: '${{ parameters.OSName }} Python 3.4'
      mergeTestResults: true

  - task: PublishTestResults@2
    displayName: 'Publish Python 3.5 Test Results'
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/test-junit-python3.5-*.xml'
      testRunTitle: '${{ parameters.OSName }} Python 3.5'
      mergeTestResults: true

  - task: PublishTestResults@2
    displayName: 'Publish Python 3.6 Test Results'
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/test-junit-python3.6-*.xml'
      testRunTitle: '${{ parameters.OSName }} Python 3.6'
      mergeTestResults: true

  - task: PublishTestResults@2
    displayName: 'Publish Python3.7 Test Results'
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/test-junit-py37-*.xml'
      testRunTitle: '${{ parameters.OSName }} Python 3.7'
      mergeTestResults: true

  - task: PublishTestResults@2
    displayName: 'Publish Python 3.6 Dev Install Test Results'
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: '**/test-junit-sdist.xml'
      testRunTitle: '${{ parameters.OSName }} Python 3.6 Develop Installation Tests'
      mergeTestResults: true